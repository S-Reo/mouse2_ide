
Second_Mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c8c  08003c8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c94  08003c94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  08003d0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003d0c  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aa2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd7  00000000  00000000  00027b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00029720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  00029e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2ab  00000000  00000000  0002a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009689  00000000  00000000  000496d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000baef0  00000000  00000000  00052d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dc4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c8  00000000  00000000  0010dc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003b98 	.word	0x08003b98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003b98 	.word	0x08003b98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	e000      	b.n	80005e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <_write>:

return(Data);
}
#endif
int _write(int file, char *ptr, int len)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e009      	b.n	8000628 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffc9 	bl	80005b4 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbf1      	blt.n	8000614 <_write+0x12>
  }
  return len;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fb3f 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f839 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f94b 	bl	80008e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800064e:	f000 f89f 	bl	8000790 <MX_ADC1_Init>
  MX_DMA_Init();
 8000652:	f000 f927 	bl	80008a4 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */


  printf(" Hi\r\n");
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <main+0x6c>)
 8000658:	f002 fad8 	bl	8002c0c <puts>
#if 1
  //encoder
  //IR emitter
  //EmitterON();
  //ADCStart();
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcarien, ADC1_CH_NUM);
 800065c:	2205      	movs	r2, #5
 800065e:	4913      	ldr	r1, [pc, #76]	; (80006ac <main+0x70>)
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <main+0x74>)
 8000662:	f000 fc09 	bl	8000e78 <HAL_ADC_Start_DMA>
  //HAL_Delay(1000);

  //battery
  //uint32_t batt = adcarien[0];
  HAL_Delay(500);
 8000666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066a:	f000 fb9d 	bl	8000da8 <HAL_Delay>
  //printf("batt : %ld\r\n",batt);

  //HAL_Delay(200);
  printf("get IR\r\n");
 800066e:	4811      	ldr	r0, [pc, #68]	; (80006b4 <main+0x78>)
 8000670:	f002 facc 	bl	8002c0c <puts>
//	  adcdata[1] = adc1[1];
//	  adcdata[2] = adc1[2];
//	  adcdata[3] = adc1[3];
//	  adcdata[4] = adc1[4];
	        //ADCStart();
	  printf("adc : %d, %d, %d, %d, %d\r\n",adcarien[0],adcarien[1],adcarien[2],adcarien[3],adcarien[4]);
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <main+0x70>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <main+0x70>)
 800067c:	885b      	ldrh	r3, [r3, #2]
 800067e:	4618      	mov	r0, r3
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <main+0x70>)
 8000682:	889b      	ldrh	r3, [r3, #4]
 8000684:	461c      	mov	r4, r3
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <main+0x70>)
 8000688:	88db      	ldrh	r3, [r3, #6]
 800068a:	461a      	mov	r2, r3
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <main+0x70>)
 800068e:	891b      	ldrh	r3, [r3, #8]
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	9200      	str	r2, [sp, #0]
 8000694:	4623      	mov	r3, r4
 8000696:	4602      	mov	r2, r0
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <main+0x7c>)
 800069a:	f002 fa1b 	bl	8002ad4 <iprintf>
	  //printf("scan conversion\r\n");
	  HAL_Delay(200);
 800069e:	20c8      	movs	r0, #200	; 0xc8
 80006a0:	f000 fb82 	bl	8000da8 <HAL_Delay>
	  printf("adc : %d, %d, %d, %d, %d\r\n",adcarien[0],adcarien[1],adcarien[2],adcarien[3],adcarien[4]);
 80006a4:	e7e6      	b.n	8000674 <main+0x38>
 80006a6:	bf00      	nop
 80006a8:	08003bb0 	.word	0x08003bb0
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	20000098 	.word	0x20000098
 80006b4:	08003bb8 	.word	0x08003bb8
 80006b8:	08003bc0 	.word	0x08003bc0

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f9fa 	bl	8002ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f001 ff0f 	bl	8002568 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000750:	f000 f8fe 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2103      	movs	r1, #3
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fd4d 	bl	8002210 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800077c:	f000 f8e8 	bl	8000950 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <MX_ADC1_Init+0x108>)
 80007a4:	4a3d      	ldr	r2, [pc, #244]	; (800089c <MX_ADC1_Init+0x10c>)
 80007a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a8:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <MX_ADC1_Init+0x108>)
 80007aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b0:	4b39      	ldr	r3, [pc, #228]	; (8000898 <MX_ADC1_Init+0x108>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007b6:	4b38      	ldr	r3, [pc, #224]	; (8000898 <MX_ADC1_Init+0x108>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007bc:	4b36      	ldr	r3, [pc, #216]	; (8000898 <MX_ADC1_Init+0x108>)
 80007be:	2201      	movs	r2, #1
 80007c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c2:	4b35      	ldr	r3, [pc, #212]	; (8000898 <MX_ADC1_Init+0x108>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MX_ADC1_Init+0x108>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <MX_ADC1_Init+0x108>)
 80007d2:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <MX_ADC1_Init+0x110>)
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d6:	4b30      	ldr	r3, [pc, #192]	; (8000898 <MX_ADC1_Init+0x108>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_ADC1_Init+0x108>)
 80007de:	2205      	movs	r2, #5
 80007e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_ADC1_Init+0x108>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_ADC1_Init+0x108>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f0:	4829      	ldr	r0, [pc, #164]	; (8000898 <MX_ADC1_Init+0x108>)
 80007f2:	f000 fafd 	bl	8000df0 <HAL_ADC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007fc:	f000 f8a8 	bl	8000950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000800:	2302      	movs	r3, #2
 8000802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000808:	2302      	movs	r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4821      	ldr	r0, [pc, #132]	; (8000898 <MX_ADC1_Init+0x108>)
 8000812:	f000 fc67 	bl	80010e4 <HAL_ADC_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800081c:	f000 f898 	bl	8000950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000820:	2303      	movs	r3, #3
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <MX_ADC1_Init+0x108>)
 800082e:	f000 fc59 	bl	80010e4 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000838:	f000 f88a 	bl	8000950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800083c:	2304      	movs	r3, #4
 800083e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000840:	2303      	movs	r3, #3
 8000842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <MX_ADC1_Init+0x108>)
 800084a:	f000 fc4b 	bl	80010e4 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000854:	f000 f87c 	bl	8000950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000858:	2305      	movs	r3, #5
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800085c:	2304      	movs	r3, #4
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_ADC1_Init+0x108>)
 8000866:	f000 fc3d 	bl	80010e4 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000870:	f000 f86e 	bl	8000950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000874:	2308      	movs	r3, #8
 8000876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000878:	2305      	movs	r3, #5
 800087a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_ADC1_Init+0x108>)
 8000882:	f000 fc2f 	bl	80010e4 <HAL_ADC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800088c:	f000 f860 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000098 	.word	0x20000098
 800089c:	40012000 	.word	0x40012000
 80008a0:	0f000001 	.word	0x0f000001

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2038      	movs	r0, #56	; 0x38
 80008cc:	f000 ff85 	bl	80017da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d0:	2038      	movs	r0, #56	; 0x38
 80008d2:	f000 ff9e 	bl	8001812 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_GPIO_Init+0x68>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <MX_GPIO_Init+0x68>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_GPIO_Init+0x68>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <MX_GPIO_Init+0x68>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_GPIO_Init+0x68>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_GPIO_Init+0x68>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <MX_GPIO_Init+0x68>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_GPIO_Init+0x68>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a3c      	ldr	r2, [pc, #240]	; (8000abc <HAL_ADC_MspInit+0x110>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d171      	bne.n	8000ab2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a33      	ldr	r2, [pc, #204]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <HAL_ADC_MspInit+0x114>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a22:	233c      	movs	r3, #60	; 0x3c
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4823      	ldr	r0, [pc, #140]	; (8000ac4 <HAL_ADC_MspInit+0x118>)
 8000a36:	f001 fa77 	bl	8001f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <HAL_ADC_MspInit+0x11c>)
 8000a4e:	f001 fa6b 	bl	8001f28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a54:	4a1e      	ldr	r2, [pc, #120]	; (8000ad0 <HAL_ADC_MspInit+0x124>)
 8000a56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000a98:	f000 fed6 	bl	8001848 <HAL_DMA_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000aa2:	f7ff ff55 	bl	8000950 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_ADC_MspInit+0x120>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40012000 	.word	0x40012000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	200000e0 	.word	0x200000e0
 8000ad0:	40026410 	.word	0x40026410

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f922 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA2_Stream0_IRQHandler+0x10>)
 8000b2e:	f000 ff91 	bl	8001a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000e0 	.word	0x200000e0

08000b3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e00a      	b.n	8000b64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b4e:	f3af 8000 	nop.w
 8000b52:	4601      	mov	r1, r0
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	b2ca      	uxtb	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf0      	blt.n	8000b4e <_read+0x12>
	}

return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_isatty>:

int _isatty(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f001 ff2e 	bl	8002a70 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20040000 	.word	0x20040000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000140 	.word	0x20000140
 8000c48:	20000158 	.word	0x20000158

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ffd7 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f001 feed 	bl	8002a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fccb 	bl	800063c <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ca8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb4:	08003c9c 	.word	0x08003c9c
  ldr r2, =_sbss
 8000cb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cbc:	20000158 	.word	0x20000158

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 fd69 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fe30 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fd81 	bl	800182e <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 fd49 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000144 	.word	0x20000144

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000144 	.word	0x20000144

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e033      	b.n	8000e6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d109      	bne.n	8000e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fdcc 	bl	80009ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d118      	bne.n	8000e60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e36:	f023 0302 	bic.w	r3, r3, #2
 8000e3a:	f043 0202 	orr.w	r2, r3, #2
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fa70 	bl	8001328 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f023 0303 	bic.w	r3, r3, #3
 8000e56:	f043 0201 	orr.w	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e5e:	e001      	b.n	8000e64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <HAL_ADC_Start_DMA+0x1e>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e0f5      	b.n	8001082 <HAL_ADC_Start_DMA+0x20a>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d01b      	beq.n	8000ee4 <HAL_ADC_Start_DMA+0x6c>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0201 	orr.w	r2, r2, #1
 8000eba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ebc:	4b73      	ldr	r3, [pc, #460]	; (800108c <HAL_ADC_Start_DMA+0x214>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a73      	ldr	r2, [pc, #460]	; (8001090 <HAL_ADC_Start_DMA+0x218>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	0c9a      	lsrs	r2, r3, #18
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ed0:	e002      	b.n	8000ed8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f9      	bne.n	8000ed2 <HAL_ADC_Start_DMA+0x5a>
    }
    printf("a");
 8000ede:	2061      	movs	r0, #97	; 0x61
 8000ee0:	f001 fe10 	bl	8002b04 <putchar>
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef2:	d10a      	bne.n	8000f0a <HAL_ADC_Start_DMA+0x92>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f02:	609a      	str	r2, [r3, #8]
    printf("b");
 8000f04:	2062      	movs	r0, #98	; 0x62
 8000f06:	f001 fdfd 	bl	8002b04 <putchar>
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	f040 80a4 	bne.w	8001062 <HAL_ADC_Start_DMA+0x1ea>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    printf("c");
 8000f2e:	2063      	movs	r0, #99	; 0x63
 8000f30:	f001 fde8 	bl	8002b04 <putchar>
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00a      	beq.n	8000f58 <HAL_ADC_Start_DMA+0xe0>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
      printf("d");
 8000f52:	2064      	movs	r0, #100	; 0x64
 8000f54:	f001 fdd6 	bl	8002b04 <putchar>
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f64:	d109      	bne.n	8000f7a <HAL_ADC_Start_DMA+0x102>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f023 0206 	bic.w	r2, r3, #6
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	645a      	str	r2, [r3, #68]	; 0x44
      printf("e");
 8000f72:	2065      	movs	r0, #101	; 0x65
 8000f74:	f001 fdc6 	bl	8002b04 <putchar>
 8000f78:	e005      	b.n	8000f86 <HAL_ADC_Start_DMA+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	645a      	str	r2, [r3, #68]	; 0x44
      printf("f");
 8000f80:	2066      	movs	r0, #102	; 0x66
 8000f82:	f001 fdbf 	bl	8002b04 <putchar>
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <HAL_ADC_Start_DMA+0x21c>)
 8000f90:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f96:	4a40      	ldr	r2, [pc, #256]	; (8001098 <HAL_ADC_Start_DMA+0x220>)
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9e:	4a3f      	ldr	r2, [pc, #252]	; (800109c <HAL_ADC_Start_DMA+0x224>)
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <HAL_ADC_Start_DMA+0x228>)
 8000fa8:	64da      	str	r2, [r3, #76]	; 0x4c
    printf("g");
 8000faa:	2067      	movs	r0, #103	; 0x67
 8000fac:	f001 fdaa 	bl	8002b04 <putchar>
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000fc8:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fd8:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	334c      	adds	r3, #76	; 0x4c
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f000 fcdb 	bl	80019a4 <HAL_DMA_Start_IT>
    printf("h");
 8000fee:	2068      	movs	r0, #104	; 0x68
 8000ff0:	f001 fd88 	bl	8002b04 <putchar>
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d115      	bne.n	800102c <HAL_ADC_Start_DMA+0x1b4>
    {
    	printf("i");
 8001000:	2069      	movs	r0, #105	; 0x69
 8001002:	f001 fd7f 	bl	8002b04 <putchar>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d135      	bne.n	8001080 <HAL_ADC_Start_DMA+0x208>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001022:	609a      	str	r2, [r3, #8]
          printf("j");
 8001024:	206a      	movs	r0, #106	; 0x6a
 8001026:	f001 fd6d 	bl	8002b04 <putchar>
 800102a:	e029      	b.n	8001080 <HAL_ADC_Start_DMA+0x208>
      }
#endif /* ADC2 || ADC3 */
    }
    else
    {
    	printf("k");
 800102c:	206b      	movs	r0, #107	; 0x6b
 800102e:	f001 fd69 	bl	8002b04 <putchar>
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_ADC_Start_DMA+0x22c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d121      	bne.n	8001080 <HAL_ADC_Start_DMA+0x208>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d11a      	bne.n	8001080 <HAL_ADC_Start_DMA+0x208>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001058:	609a      	str	r2, [r3, #8]
          printf("l");
 800105a:	206c      	movs	r0, #108	; 0x6c
 800105c:	f001 fd52 	bl	8002b04 <putchar>
 8001060:	e00e      	b.n	8001080 <HAL_ADC_Start_DMA+0x208>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f043 0210 	orr.w	r2, r3, #16
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f043 0201 	orr.w	r2, r3, #1
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    printf("m");
 800107a:	206d      	movs	r0, #109	; 0x6d
 800107c:	f001 fd42 	bl	8002b04 <putchar>
  }
  
  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000000 	.word	0x20000000
 8001090:	431bde83 	.word	0x431bde83
 8001094:	40012300 	.word	0x40012300
 8001098:	08001521 	.word	0x08001521
 800109c:	080015db 	.word	0x080015db
 80010a0:	080015f7 	.word	0x080015f7
 80010a4:	40012000 	.word	0x40012000

080010a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x1c>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e105      	b.n	800130c <HAL_ADC_ConfigChannel+0x228>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b09      	cmp	r3, #9
 800110e:	d925      	bls.n	800115c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68d9      	ldr	r1, [r3, #12]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	3b1e      	subs	r3, #30
 8001126:	2207      	movs	r2, #7
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43da      	mvns	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	400a      	ands	r2, r1
 8001134:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68d9      	ldr	r1, [r3, #12]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	4603      	mov	r3, r0
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4403      	add	r3, r0
 800114e:	3b1e      	subs	r3, #30
 8001150:	409a      	lsls	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	e022      	b.n	80011a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6919      	ldr	r1, [r3, #16]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	2207      	movs	r2, #7
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6919      	ldr	r1, [r3, #16]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	4603      	mov	r3, r0
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4403      	add	r3, r0
 8001198:	409a      	lsls	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d824      	bhi.n	80011f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	3b05      	subs	r3, #5
 80011bc:	221f      	movs	r2, #31
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b05      	subs	r3, #5
 80011e6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
 80011f2:	e04c      	b.n	800128e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	d824      	bhi.n	8001246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	3b23      	subs	r3, #35	; 0x23
 800120e:	221f      	movs	r2, #31
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43da      	mvns	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b23      	subs	r3, #35	; 0x23
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
 8001244:	e023      	b.n	800128e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3b41      	subs	r3, #65	; 0x41
 8001258:	221f      	movs	r2, #31
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b41      	subs	r3, #65	; 0x41
 8001282:	fa00 f203 	lsl.w	r2, r0, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128e:	4b22      	ldr	r3, [pc, #136]	; (8001318 <HAL_ADC_ConfigChannel+0x234>)
 8001290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a21      	ldr	r2, [pc, #132]	; (800131c <HAL_ADC_ConfigChannel+0x238>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1cc>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b12      	cmp	r3, #18
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_ADC_ConfigChannel+0x238>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d123      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x21e>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d003      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x1e6>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b11      	cmp	r3, #17
 80012c8:	d11b      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d111      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_ADC_ConfigChannel+0x23c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_ADC_ConfigChannel+0x240>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	0c9a      	lsrs	r2, r3, #18
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012f4:	e002      	b.n	80012fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f9      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40012300 	.word	0x40012300
 800131c:	40012000 	.word	0x40012000
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001330:	4b79      	ldr	r3, [pc, #484]	; (8001518 <ADC_Init+0x1f0>)
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	4a58      	ldr	r2, [pc, #352]	; (800151c <ADC_Init+0x1f4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e00f      	b.n	8001426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0202 	bic.w	r2, r2, #2
 8001434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	035a      	lsls	r2, r3, #13
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e007      	b.n	800149c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	051a      	lsls	r2, r3, #20
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014de:	025a      	lsls	r2, r3, #9
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	029a      	lsls	r2, r3, #10
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40012300 	.word	0x40012300
 800151c:	0f000001 	.word	0x0f000001

08001520 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001536:	2b00      	cmp	r3, #0
 8001538:	d13c      	bne.n	80015b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d12b      	bne.n	80015ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001558:	2b00      	cmp	r3, #0
 800155a:	d127      	bne.n	80015ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001574:	2b00      	cmp	r3, #0
 8001576:	d119      	bne.n	80015ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0220 	bic.w	r2, r2, #32
 8001586:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fd7b 	bl	80010a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015b2:	e00e      	b.n	80015d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fd85 	bl	80010d0 <HAL_ADC_ErrorCallback>
}
 80015c6:	e004      	b.n	80015d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7ff fd67 	bl	80010bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f043 0204 	orr.w	r2, r3, #4
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff fd5a 	bl	80010d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <__NVIC_SetPriorityGrouping>:
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff29 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff3e 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff8e 	bl	8001718 <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff31 	bl	8001688 <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa2 	bl	8001780 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff fa9c 	bl	8000d90 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e099      	b.n	8001998 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001884:	e00f      	b.n	80018a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001886:	f7ff fa83 	bl	8000d90 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b05      	cmp	r3, #5
 8001892:	d908      	bls.n	80018a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2203      	movs	r2, #3
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e078      	b.n	8001998 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1e8      	bne.n	8001886 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <HAL_DMA_Init+0x158>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d107      	bne.n	8001910 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4313      	orrs	r3, r2
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f023 0307 	bic.w	r3, r3, #7
 8001926:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4313      	orrs	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2b04      	cmp	r3, #4
 8001938:	d117      	bne.n	800196a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4313      	orrs	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00e      	beq.n	800196a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa6f 	bl	8001e30 <DMA_CheckFifoParam>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2240      	movs	r2, #64	; 0x40
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001966:	2301      	movs	r3, #1
 8001968:	e016      	b.n	8001998 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fa26 	bl	8001dc4 <DMA_CalcBaseAndBitshift>
 8001978:	4603      	mov	r3, r0
 800197a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	223f      	movs	r2, #63	; 0x3f
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	f010803f 	.word	0xf010803f

080019a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_DMA_Start_IT+0x26>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e040      	b.n	8001a4c <HAL_DMA_Start_IT+0xa8>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d12f      	bne.n	8001a3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f9b8 	bl	8001d68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	223f      	movs	r2, #63	; 0x3f
 80019fe:	409a      	lsls	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0216 	orr.w	r2, r2, #22
 8001a12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0208 	orr.w	r2, r2, #8
 8001a2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e005      	b.n	8001a4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
 8001a48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a60:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <HAL_DMA_IRQHandler+0x248>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a8e      	ldr	r2, [pc, #568]	; (8001ca0 <HAL_DMA_IRQHandler+0x24c>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0a9b      	lsrs	r3, r3, #10
 8001a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	2208      	movs	r2, #8
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01a      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0204 	bic.w	r2, r2, #4
 8001aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2208      	movs	r2, #8
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d012      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f043 0202 	orr.w	r2, r3, #2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2204      	movs	r2, #4
 8001afc:	409a      	lsls	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d012      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00b      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	2204      	movs	r2, #4
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	f043 0204 	orr.w	r2, r3, #4
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	2210      	movs	r2, #16
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d043      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d03c      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	2210      	movs	r2, #16
 8001b50:	409a      	lsls	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d018      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d108      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d024      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
 8001b82:	e01f      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
 8001b94:	e016      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d107      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0208 	bic.w	r2, r2, #8
 8001bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	2220      	movs	r2, #32
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 808f 	beq.w	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8087 	beq.w	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bea:	2220      	movs	r2, #32
 8001bec:	409a      	lsls	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d136      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0216 	bic.w	r2, r2, #22
 8001c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <HAL_DMA_IRQHandler+0x1da>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0208 	bic.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	223f      	movs	r2, #63	; 0x3f
 8001c44:	409a      	lsls	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d07e      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
        }
        return;
 8001c6a:	e079      	b.n	8001d60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d01d      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d031      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e02c      	b.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d023      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
 8001cb4:	e01e      	b.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0210 	bic.w	r2, r2, #16
 8001cd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d032      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d022      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2205      	movs	r2, #5
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d307      	bcc.n	8001d3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f2      	bne.n	8001d20 <HAL_DMA_IRQHandler+0x2cc>
 8001d3a:	e000      	b.n	8001d3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
 8001d5e:	e000      	b.n	8001d62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d60:	bf00      	nop
    }
  }
}
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	d108      	bne.n	8001da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001da6:	e007      	b.n	8001db8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3b10      	subs	r3, #16
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <DMA_CalcBaseAndBitshift+0x64>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <DMA_CalcBaseAndBitshift+0x68>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d909      	bls.n	8001e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	1d1a      	adds	r2, r3, #4
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
 8001e04:	e007      	b.n	8001e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	aaaaaaab 	.word	0xaaaaaaab
 8001e2c:	08003bec 	.word	0x08003bec

08001e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11f      	bne.n	8001e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d856      	bhi.n	8001efe <DMA_CheckFifoParam+0xce>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <DMA_CheckFifoParam+0x28>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e7b 	.word	0x08001e7b
 8001e60:	08001e69 	.word	0x08001e69
 8001e64:	08001eff 	.word	0x08001eff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d046      	beq.n	8001f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e78:	e043      	b.n	8001f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e82:	d140      	bne.n	8001f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e88:	e03d      	b.n	8001f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e92:	d121      	bne.n	8001ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d837      	bhi.n	8001f0a <DMA_CheckFifoParam+0xda>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <DMA_CheckFifoParam+0x70>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001eb7 	.word	0x08001eb7
 8001ea8:	08001eb1 	.word	0x08001eb1
 8001eac:	08001ec9 	.word	0x08001ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb4:	e030      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d025      	beq.n	8001f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec6:	e022      	b.n	8001f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ed0:	d11f      	bne.n	8001f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ed6:	e01c      	b.n	8001f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d903      	bls.n	8001ee6 <DMA_CheckFifoParam+0xb6>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d003      	beq.n	8001eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ee4:	e018      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eea:	e015      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      break;
 8001efc:	e00b      	b.n	8001f16 <DMA_CheckFifoParam+0xe6>
      break;
 8001efe:	bf00      	nop
 8001f00:	e00a      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
 8001f04:	e008      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e006      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e004      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e002      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f12:	bf00      	nop
 8001f14:	e000      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
    }
  } 
  
  return status; 
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e14d      	b.n	80021e0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 813c 	bne.w	80021da <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d005      	beq.n	8001f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d130      	bne.n	8001fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 0201 	and.w	r2, r3, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d017      	beq.n	8002018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d123      	bne.n	800206c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8096 	beq.w	80021da <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ca:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_GPIO_Init+0x2d4>)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	220f      	movs	r2, #15
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a43      	ldr	r2, [pc, #268]	; (8002200 <HAL_GPIO_Init+0x2d8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x1ea>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a42      	ldr	r2, [pc, #264]	; (8002204 <HAL_GPIO_Init+0x2dc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x1e6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a41      	ldr	r2, [pc, #260]	; (8002208 <HAL_GPIO_Init+0x2e0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x1e2>
 8002106:	2302      	movs	r3, #2
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x1ec>
 800210a:	2307      	movs	r3, #7
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x1ec>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x1ec>
 8002112:	2300      	movs	r3, #0
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002124:	4935      	ldr	r1, [pc, #212]	; (80021fc <HAL_GPIO_Init+0x2d4>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002132:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_GPIO_Init+0x2e4>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002156:	4a2d      	ldr	r2, [pc, #180]	; (800220c <HAL_GPIO_Init+0x2e4>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_GPIO_Init+0x2e4>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002180:	4a22      	ldr	r2, [pc, #136]	; (800220c <HAL_GPIO_Init+0x2e4>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_GPIO_Init+0x2e4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021aa:	4a18      	ldr	r2, [pc, #96]	; (800220c <HAL_GPIO_Init+0x2e4>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_GPIO_Init+0x2e4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_GPIO_Init+0x2e4>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	f67f aeae 	bls.w	8001f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40013c00 	.word	0x40013c00

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0cc      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d90c      	bls.n	800224c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b8      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b59      	ldr	r3, [pc, #356]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800226e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	494d      	ldr	r1, [pc, #308]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d044      	beq.n	8002330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d119      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e067      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4934      	ldr	r1, [pc, #208]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7fe fd46 	bl	8000d90 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fd42 	bl	8000d90 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d20c      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4916      	ldr	r1, [pc, #88]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490e      	ldr	r1, [pc, #56]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002396:	f000 f821 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490a      	ldr	r1, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fca6 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08003bdc 	.word	0x08003bdc
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e0:	b090      	sub	sp, #64	; 0x40
 80023e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
 80023e8:	2300      	movs	r3, #0
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ec:	2300      	movs	r3, #0
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d00d      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x40>
 8002400:	2b08      	cmp	r3, #8
 8002402:	f200 80a1 	bhi.w	8002548 <HAL_RCC_GetSysClockFreq+0x16c>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x34>
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x3a>
 800240e:	e09b      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_GetSysClockFreq+0x184>)
 8002412:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002414:	e09b      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002416:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_GetSysClockFreq+0x188>)
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800241a:	e098      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002426:	4b4d      	ldr	r3, [pc, #308]	; (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d028      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	4b4a      	ldr	r3, [pc, #296]	; (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	2200      	movs	r2, #0
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	627a      	str	r2, [r7, #36]	; 0x24
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002444:	2100      	movs	r1, #0
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_GetSysClockFreq+0x188>)
 8002448:	fb03 f201 	mul.w	r2, r3, r1
 800244c:	2300      	movs	r3, #0
 800244e:	fb00 f303 	mul.w	r3, r0, r3
 8002452:	4413      	add	r3, r2
 8002454:	4a43      	ldr	r2, [pc, #268]	; (8002564 <HAL_RCC_GetSysClockFreq+0x188>)
 8002456:	fba0 1202 	umull	r1, r2, r0, r2
 800245a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800245c:	460a      	mov	r2, r1
 800245e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002462:	4413      	add	r3, r2
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002468:	2200      	movs	r2, #0
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	61fa      	str	r2, [r7, #28]
 800246e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002472:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002476:	f7fd ff1b 	bl	80002b0 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4613      	mov	r3, r2
 8002480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002482:	e053      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002484:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	099b      	lsrs	r3, r3, #6
 800248a:	2200      	movs	r2, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	617a      	str	r2, [r7, #20]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002496:	f04f 0b00 	mov.w	fp, #0
 800249a:	4652      	mov	r2, sl
 800249c:	465b      	mov	r3, fp
 800249e:	f04f 0000 	mov.w	r0, #0
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	0159      	lsls	r1, r3, #5
 80024a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ac:	0150      	lsls	r0, r2, #5
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	ebb2 080a 	subs.w	r8, r2, sl
 80024b6:	eb63 090b 	sbc.w	r9, r3, fp
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024ce:	ebb2 0408 	subs.w	r4, r2, r8
 80024d2:	eb63 0509 	sbc.w	r5, r3, r9
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	00eb      	lsls	r3, r5, #3
 80024e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024e4:	00e2      	lsls	r2, r4, #3
 80024e6:	4614      	mov	r4, r2
 80024e8:	461d      	mov	r5, r3
 80024ea:	eb14 030a 	adds.w	r3, r4, sl
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	eb45 030b 	adc.w	r3, r5, fp
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002502:	4629      	mov	r1, r5
 8002504:	028b      	lsls	r3, r1, #10
 8002506:	4621      	mov	r1, r4
 8002508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800250c:	4621      	mov	r1, r4
 800250e:	028a      	lsls	r2, r1, #10
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002516:	2200      	movs	r2, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	60fa      	str	r2, [r7, #12]
 800251c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002520:	f7fd fec6 	bl	80002b0 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4613      	mov	r3, r2
 800252a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800253c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002546:	e002      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetSysClockFreq+0x184>)
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800254c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002550:	4618      	mov	r0, r3
 8002552:	3740      	adds	r7, #64	; 0x40
 8002554:	46bd      	mov	sp, r7
 8002556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	00f42400 	.word	0x00f42400
 8002564:	017d7840 	.word	0x017d7840

08002568 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e273      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d075      	beq.n	8002672 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002586:	4b88      	ldr	r3, [pc, #544]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00c      	beq.n	80025ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b85      	ldr	r3, [pc, #532]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d112      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4b82      	ldr	r3, [pc, #520]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4b7e      	ldr	r3, [pc, #504]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05b      	beq.n	8002670 <HAL_RCC_OscConfig+0x108>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d157      	bne.n	8002670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e24e      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d106      	bne.n	80025dc <HAL_RCC_OscConfig+0x74>
 80025ce:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a75      	ldr	r2, [pc, #468]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b70      	ldr	r3, [pc, #448]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6f      	ldr	r2, [pc, #444]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6c      	ldr	r2, [pc, #432]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 8002600:	4b69      	ldr	r3, [pc, #420]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a68      	ldr	r2, [pc, #416]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a65      	ldr	r2, [pc, #404]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fbb6 	bl	8000d90 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fbb2 	bl	8000d90 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e213      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xc0>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fba2 	bl	8000d90 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fb9e 	bl	8000d90 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1ff      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0xe8>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800267e:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1d3      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4937      	ldr	r1, [pc, #220]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <HAL_RCC_OscConfig+0x244>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fb57 	bl	8000d90 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe fb53 	bl	8000d90 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1b4      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4925      	ldr	r1, [pc, #148]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_OscConfig+0x244>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fb36 	bl	8000d90 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002728:	f7fe fb32 	bl	8000d90 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e193      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d036      	beq.n	80027c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCC_OscConfig+0x248>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fb16 	bl	8000d90 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe fb12 	bl	8000d90 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e173      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800277c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x200>
 8002786:	e01b      	b.n	80027c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_OscConfig+0x248>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe faff 	bl	8000d90 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	e00e      	b.n	80027b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002796:	f7fe fafb 	bl	8000d90 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d907      	bls.n	80027b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e15c      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470000 	.word	0x42470000
 80027b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b8a      	ldr	r3, [pc, #552]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ea      	bne.n	8002796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8097 	beq.w	80028fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b83      	ldr	r3, [pc, #524]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a7e      	ldr	r2, [pc, #504]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b7c      	ldr	r3, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <HAL_RCC_OscConfig+0x47c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCC_OscConfig+0x47c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a75      	ldr	r2, [pc, #468]	; (80029e4 <HAL_RCC_OscConfig+0x47c>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7fe fabb 	bl	8000d90 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7fe fab7 	bl	8000d90 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e118      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b6c      	ldr	r3, [pc, #432]	; (80029e4 <HAL_RCC_OscConfig+0x47c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x2ea>
 8002844:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b05      	cmp	r3, #5
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x30c>
 800285a:	4b61      	ldr	r3, [pc, #388]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a60      	ldr	r2, [pc, #384]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	4a5d      	ldr	r2, [pc, #372]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	; 0x70
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002874:	4b5a      	ldr	r3, [pc, #360]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a59      	ldr	r2, [pc, #356]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	4a56      	ldr	r2, [pc, #344]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fa7c 	bl	8000d90 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe fa78 	bl	8000d90 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0d7      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ee      	beq.n	800289c <HAL_RCC_OscConfig+0x334>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fa66 	bl	8000d90 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fa62 	bl	8000d90 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0c1      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f0:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	4a3a      	ldr	r2, [pc, #232]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80028f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80ad 	beq.w	8002a60 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d060      	beq.n	80029d4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d145      	bne.n	80029a6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_RCC_OscConfig+0x480>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fa36 	bl	8000d90 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fa32 	bl	8000d90 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e093      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	071b      	lsls	r3, r3, #28
 8002972:	491b      	ldr	r1, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x480>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fa07 	bl	8000d90 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fa03 	bl	8000d90 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e064      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x41e>
 80029a4:	e05c      	b.n	8002a60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_OscConfig+0x480>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe f9f0 	bl	8000d90 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe f9ec 	bl	8000d90 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e04d      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x44c>
 80029d2:	e045      	b.n	8002a60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e040      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <HAL_RCC_OscConfig+0x504>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d030      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d129      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d122      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d119      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d10f      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800

08002a70 <__errno>:
 8002a70:	4b01      	ldr	r3, [pc, #4]	; (8002a78 <__errno+0x8>)
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	2000000c 	.word	0x2000000c

08002a7c <__libc_init_array>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	4d0d      	ldr	r5, [pc, #52]	; (8002ab4 <__libc_init_array+0x38>)
 8002a80:	4c0d      	ldr	r4, [pc, #52]	; (8002ab8 <__libc_init_array+0x3c>)
 8002a82:	1b64      	subs	r4, r4, r5
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	2600      	movs	r6, #0
 8002a88:	42a6      	cmp	r6, r4
 8002a8a:	d109      	bne.n	8002aa0 <__libc_init_array+0x24>
 8002a8c:	4d0b      	ldr	r5, [pc, #44]	; (8002abc <__libc_init_array+0x40>)
 8002a8e:	4c0c      	ldr	r4, [pc, #48]	; (8002ac0 <__libc_init_array+0x44>)
 8002a90:	f001 f882 	bl	8003b98 <_init>
 8002a94:	1b64      	subs	r4, r4, r5
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	2600      	movs	r6, #0
 8002a9a:	42a6      	cmp	r6, r4
 8002a9c:	d105      	bne.n	8002aaa <__libc_init_array+0x2e>
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa4:	4798      	blx	r3
 8002aa6:	3601      	adds	r6, #1
 8002aa8:	e7ee      	b.n	8002a88 <__libc_init_array+0xc>
 8002aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aae:	4798      	blx	r3
 8002ab0:	3601      	adds	r6, #1
 8002ab2:	e7f2      	b.n	8002a9a <__libc_init_array+0x1e>
 8002ab4:	08003c94 	.word	0x08003c94
 8002ab8:	08003c94 	.word	0x08003c94
 8002abc:	08003c94 	.word	0x08003c94
 8002ac0:	08003c98 	.word	0x08003c98

08002ac4 <memset>:
 8002ac4:	4402      	add	r2, r0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <iprintf>:
 8002ad4:	b40f      	push	{r0, r1, r2, r3}
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <iprintf+0x2c>)
 8002ad8:	b513      	push	{r0, r1, r4, lr}
 8002ada:	681c      	ldr	r4, [r3, #0]
 8002adc:	b124      	cbz	r4, 8002ae8 <iprintf+0x14>
 8002ade:	69a3      	ldr	r3, [r4, #24]
 8002ae0:	b913      	cbnz	r3, 8002ae8 <iprintf+0x14>
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f000 fa74 	bl	8002fd0 <__sinit>
 8002ae8:	ab05      	add	r3, sp, #20
 8002aea:	9a04      	ldr	r2, [sp, #16]
 8002aec:	68a1      	ldr	r1, [r4, #8]
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	4620      	mov	r0, r4
 8002af2:	f000 fc7d 	bl	80033f0 <_vfiprintf_r>
 8002af6:	b002      	add	sp, #8
 8002af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002afc:	b004      	add	sp, #16
 8002afe:	4770      	bx	lr
 8002b00:	2000000c 	.word	0x2000000c

08002b04 <putchar>:
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <putchar+0x28>)
 8002b06:	b513      	push	{r0, r1, r4, lr}
 8002b08:	681c      	ldr	r4, [r3, #0]
 8002b0a:	4601      	mov	r1, r0
 8002b0c:	b134      	cbz	r4, 8002b1c <putchar+0x18>
 8002b0e:	69a3      	ldr	r3, [r4, #24]
 8002b10:	b923      	cbnz	r3, 8002b1c <putchar+0x18>
 8002b12:	9001      	str	r0, [sp, #4]
 8002b14:	4620      	mov	r0, r4
 8002b16:	f000 fa5b 	bl	8002fd0 <__sinit>
 8002b1a:	9901      	ldr	r1, [sp, #4]
 8002b1c:	68a2      	ldr	r2, [r4, #8]
 8002b1e:	4620      	mov	r0, r4
 8002b20:	b002      	add	sp, #8
 8002b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b26:	f000 bf27 	b.w	8003978 <_putc_r>
 8002b2a:	bf00      	nop
 8002b2c:	2000000c 	.word	0x2000000c

08002b30 <_puts_r>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	460e      	mov	r6, r1
 8002b34:	4605      	mov	r5, r0
 8002b36:	b118      	cbz	r0, 8002b40 <_puts_r+0x10>
 8002b38:	6983      	ldr	r3, [r0, #24]
 8002b3a:	b90b      	cbnz	r3, 8002b40 <_puts_r+0x10>
 8002b3c:	f000 fa48 	bl	8002fd0 <__sinit>
 8002b40:	69ab      	ldr	r3, [r5, #24]
 8002b42:	68ac      	ldr	r4, [r5, #8]
 8002b44:	b913      	cbnz	r3, 8002b4c <_puts_r+0x1c>
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 fa42 	bl	8002fd0 <__sinit>
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <_puts_r+0xd0>)
 8002b4e:	429c      	cmp	r4, r3
 8002b50:	d120      	bne.n	8002b94 <_puts_r+0x64>
 8002b52:	686c      	ldr	r4, [r5, #4]
 8002b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b56:	07db      	lsls	r3, r3, #31
 8002b58:	d405      	bmi.n	8002b66 <_puts_r+0x36>
 8002b5a:	89a3      	ldrh	r3, [r4, #12]
 8002b5c:	0598      	lsls	r0, r3, #22
 8002b5e:	d402      	bmi.n	8002b66 <_puts_r+0x36>
 8002b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b62:	f000 fad3 	bl	800310c <__retarget_lock_acquire_recursive>
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	0719      	lsls	r1, r3, #28
 8002b6a:	d51d      	bpl.n	8002ba8 <_puts_r+0x78>
 8002b6c:	6923      	ldr	r3, [r4, #16]
 8002b6e:	b1db      	cbz	r3, 8002ba8 <_puts_r+0x78>
 8002b70:	3e01      	subs	r6, #1
 8002b72:	68a3      	ldr	r3, [r4, #8]
 8002b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	60a3      	str	r3, [r4, #8]
 8002b7c:	bb39      	cbnz	r1, 8002bce <_puts_r+0x9e>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da38      	bge.n	8002bf4 <_puts_r+0xc4>
 8002b82:	4622      	mov	r2, r4
 8002b84:	210a      	movs	r1, #10
 8002b86:	4628      	mov	r0, r5
 8002b88:	f000 f848 	bl	8002c1c <__swbuf_r>
 8002b8c:	3001      	adds	r0, #1
 8002b8e:	d011      	beq.n	8002bb4 <_puts_r+0x84>
 8002b90:	250a      	movs	r5, #10
 8002b92:	e011      	b.n	8002bb8 <_puts_r+0x88>
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <_puts_r+0xd4>)
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d101      	bne.n	8002b9e <_puts_r+0x6e>
 8002b9a:	68ac      	ldr	r4, [r5, #8]
 8002b9c:	e7da      	b.n	8002b54 <_puts_r+0x24>
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <_puts_r+0xd8>)
 8002ba0:	429c      	cmp	r4, r3
 8002ba2:	bf08      	it	eq
 8002ba4:	68ec      	ldreq	r4, [r5, #12]
 8002ba6:	e7d5      	b.n	8002b54 <_puts_r+0x24>
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	f000 f888 	bl	8002cc0 <__swsetup_r>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d0dd      	beq.n	8002b70 <_puts_r+0x40>
 8002bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8002bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bba:	07da      	lsls	r2, r3, #31
 8002bbc:	d405      	bmi.n	8002bca <_puts_r+0x9a>
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	059b      	lsls	r3, r3, #22
 8002bc2:	d402      	bmi.n	8002bca <_puts_r+0x9a>
 8002bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bc6:	f000 faa2 	bl	800310e <__retarget_lock_release_recursive>
 8002bca:	4628      	mov	r0, r5
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da04      	bge.n	8002bdc <_puts_r+0xac>
 8002bd2:	69a2      	ldr	r2, [r4, #24]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dc06      	bgt.n	8002be6 <_puts_r+0xb6>
 8002bd8:	290a      	cmp	r1, #10
 8002bda:	d004      	beq.n	8002be6 <_puts_r+0xb6>
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	6022      	str	r2, [r4, #0]
 8002be2:	7019      	strb	r1, [r3, #0]
 8002be4:	e7c5      	b.n	8002b72 <_puts_r+0x42>
 8002be6:	4622      	mov	r2, r4
 8002be8:	4628      	mov	r0, r5
 8002bea:	f000 f817 	bl	8002c1c <__swbuf_r>
 8002bee:	3001      	adds	r0, #1
 8002bf0:	d1bf      	bne.n	8002b72 <_puts_r+0x42>
 8002bf2:	e7df      	b.n	8002bb4 <_puts_r+0x84>
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	250a      	movs	r5, #10
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	6022      	str	r2, [r4, #0]
 8002bfc:	701d      	strb	r5, [r3, #0]
 8002bfe:	e7db      	b.n	8002bb8 <_puts_r+0x88>
 8002c00:	08003c18 	.word	0x08003c18
 8002c04:	08003c38 	.word	0x08003c38
 8002c08:	08003bf8 	.word	0x08003bf8

08002c0c <puts>:
 8002c0c:	4b02      	ldr	r3, [pc, #8]	; (8002c18 <puts+0xc>)
 8002c0e:	4601      	mov	r1, r0
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	f7ff bf8d 	b.w	8002b30 <_puts_r>
 8002c16:	bf00      	nop
 8002c18:	2000000c 	.word	0x2000000c

08002c1c <__swbuf_r>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	460e      	mov	r6, r1
 8002c20:	4614      	mov	r4, r2
 8002c22:	4605      	mov	r5, r0
 8002c24:	b118      	cbz	r0, 8002c2e <__swbuf_r+0x12>
 8002c26:	6983      	ldr	r3, [r0, #24]
 8002c28:	b90b      	cbnz	r3, 8002c2e <__swbuf_r+0x12>
 8002c2a:	f000 f9d1 	bl	8002fd0 <__sinit>
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <__swbuf_r+0x98>)
 8002c30:	429c      	cmp	r4, r3
 8002c32:	d12b      	bne.n	8002c8c <__swbuf_r+0x70>
 8002c34:	686c      	ldr	r4, [r5, #4]
 8002c36:	69a3      	ldr	r3, [r4, #24]
 8002c38:	60a3      	str	r3, [r4, #8]
 8002c3a:	89a3      	ldrh	r3, [r4, #12]
 8002c3c:	071a      	lsls	r2, r3, #28
 8002c3e:	d52f      	bpl.n	8002ca0 <__swbuf_r+0x84>
 8002c40:	6923      	ldr	r3, [r4, #16]
 8002c42:	b36b      	cbz	r3, 8002ca0 <__swbuf_r+0x84>
 8002c44:	6923      	ldr	r3, [r4, #16]
 8002c46:	6820      	ldr	r0, [r4, #0]
 8002c48:	1ac0      	subs	r0, r0, r3
 8002c4a:	6963      	ldr	r3, [r4, #20]
 8002c4c:	b2f6      	uxtb	r6, r6
 8002c4e:	4283      	cmp	r3, r0
 8002c50:	4637      	mov	r7, r6
 8002c52:	dc04      	bgt.n	8002c5e <__swbuf_r+0x42>
 8002c54:	4621      	mov	r1, r4
 8002c56:	4628      	mov	r0, r5
 8002c58:	f000 f926 	bl	8002ea8 <_fflush_r>
 8002c5c:	bb30      	cbnz	r0, 8002cac <__swbuf_r+0x90>
 8002c5e:	68a3      	ldr	r3, [r4, #8]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	60a3      	str	r3, [r4, #8]
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	6022      	str	r2, [r4, #0]
 8002c6a:	701e      	strb	r6, [r3, #0]
 8002c6c:	6963      	ldr	r3, [r4, #20]
 8002c6e:	3001      	adds	r0, #1
 8002c70:	4283      	cmp	r3, r0
 8002c72:	d004      	beq.n	8002c7e <__swbuf_r+0x62>
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d506      	bpl.n	8002c88 <__swbuf_r+0x6c>
 8002c7a:	2e0a      	cmp	r6, #10
 8002c7c:	d104      	bne.n	8002c88 <__swbuf_r+0x6c>
 8002c7e:	4621      	mov	r1, r4
 8002c80:	4628      	mov	r0, r5
 8002c82:	f000 f911 	bl	8002ea8 <_fflush_r>
 8002c86:	b988      	cbnz	r0, 8002cac <__swbuf_r+0x90>
 8002c88:	4638      	mov	r0, r7
 8002c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <__swbuf_r+0x9c>)
 8002c8e:	429c      	cmp	r4, r3
 8002c90:	d101      	bne.n	8002c96 <__swbuf_r+0x7a>
 8002c92:	68ac      	ldr	r4, [r5, #8]
 8002c94:	e7cf      	b.n	8002c36 <__swbuf_r+0x1a>
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <__swbuf_r+0xa0>)
 8002c98:	429c      	cmp	r4, r3
 8002c9a:	bf08      	it	eq
 8002c9c:	68ec      	ldreq	r4, [r5, #12]
 8002c9e:	e7ca      	b.n	8002c36 <__swbuf_r+0x1a>
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f000 f80c 	bl	8002cc0 <__swsetup_r>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d0cb      	beq.n	8002c44 <__swbuf_r+0x28>
 8002cac:	f04f 37ff 	mov.w	r7, #4294967295
 8002cb0:	e7ea      	b.n	8002c88 <__swbuf_r+0x6c>
 8002cb2:	bf00      	nop
 8002cb4:	08003c18 	.word	0x08003c18
 8002cb8:	08003c38 	.word	0x08003c38
 8002cbc:	08003bf8 	.word	0x08003bf8

08002cc0 <__swsetup_r>:
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <__swsetup_r+0xcc>)
 8002cc2:	b570      	push	{r4, r5, r6, lr}
 8002cc4:	681d      	ldr	r5, [r3, #0]
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	b125      	cbz	r5, 8002cd6 <__swsetup_r+0x16>
 8002ccc:	69ab      	ldr	r3, [r5, #24]
 8002cce:	b913      	cbnz	r3, 8002cd6 <__swsetup_r+0x16>
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f000 f97d 	bl	8002fd0 <__sinit>
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <__swsetup_r+0xd0>)
 8002cd8:	429c      	cmp	r4, r3
 8002cda:	d10f      	bne.n	8002cfc <__swsetup_r+0x3c>
 8002cdc:	686c      	ldr	r4, [r5, #4]
 8002cde:	89a3      	ldrh	r3, [r4, #12]
 8002ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ce4:	0719      	lsls	r1, r3, #28
 8002ce6:	d42c      	bmi.n	8002d42 <__swsetup_r+0x82>
 8002ce8:	06dd      	lsls	r5, r3, #27
 8002cea:	d411      	bmi.n	8002d10 <__swsetup_r+0x50>
 8002cec:	2309      	movs	r3, #9
 8002cee:	6033      	str	r3, [r6, #0]
 8002cf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002cf4:	81a3      	strh	r3, [r4, #12]
 8002cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfa:	e03e      	b.n	8002d7a <__swsetup_r+0xba>
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <__swsetup_r+0xd4>)
 8002cfe:	429c      	cmp	r4, r3
 8002d00:	d101      	bne.n	8002d06 <__swsetup_r+0x46>
 8002d02:	68ac      	ldr	r4, [r5, #8]
 8002d04:	e7eb      	b.n	8002cde <__swsetup_r+0x1e>
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <__swsetup_r+0xd8>)
 8002d08:	429c      	cmp	r4, r3
 8002d0a:	bf08      	it	eq
 8002d0c:	68ec      	ldreq	r4, [r5, #12]
 8002d0e:	e7e6      	b.n	8002cde <__swsetup_r+0x1e>
 8002d10:	0758      	lsls	r0, r3, #29
 8002d12:	d512      	bpl.n	8002d3a <__swsetup_r+0x7a>
 8002d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d16:	b141      	cbz	r1, 8002d2a <__swsetup_r+0x6a>
 8002d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d1c:	4299      	cmp	r1, r3
 8002d1e:	d002      	beq.n	8002d26 <__swsetup_r+0x66>
 8002d20:	4630      	mov	r0, r6
 8002d22:	f000 fa5b 	bl	80031dc <_free_r>
 8002d26:	2300      	movs	r3, #0
 8002d28:	6363      	str	r3, [r4, #52]	; 0x34
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	2300      	movs	r3, #0
 8002d34:	6063      	str	r3, [r4, #4]
 8002d36:	6923      	ldr	r3, [r4, #16]
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	89a3      	ldrh	r3, [r4, #12]
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	81a3      	strh	r3, [r4, #12]
 8002d42:	6923      	ldr	r3, [r4, #16]
 8002d44:	b94b      	cbnz	r3, 8002d5a <__swsetup_r+0x9a>
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d50:	d003      	beq.n	8002d5a <__swsetup_r+0x9a>
 8002d52:	4621      	mov	r1, r4
 8002d54:	4630      	mov	r0, r6
 8002d56:	f000 fa01 	bl	800315c <__smakebuf_r>
 8002d5a:	89a0      	ldrh	r0, [r4, #12]
 8002d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d60:	f010 0301 	ands.w	r3, r0, #1
 8002d64:	d00a      	beq.n	8002d7c <__swsetup_r+0xbc>
 8002d66:	2300      	movs	r3, #0
 8002d68:	60a3      	str	r3, [r4, #8]
 8002d6a:	6963      	ldr	r3, [r4, #20]
 8002d6c:	425b      	negs	r3, r3
 8002d6e:	61a3      	str	r3, [r4, #24]
 8002d70:	6923      	ldr	r3, [r4, #16]
 8002d72:	b943      	cbnz	r3, 8002d86 <__swsetup_r+0xc6>
 8002d74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d78:	d1ba      	bne.n	8002cf0 <__swsetup_r+0x30>
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	0781      	lsls	r1, r0, #30
 8002d7e:	bf58      	it	pl
 8002d80:	6963      	ldrpl	r3, [r4, #20]
 8002d82:	60a3      	str	r3, [r4, #8]
 8002d84:	e7f4      	b.n	8002d70 <__swsetup_r+0xb0>
 8002d86:	2000      	movs	r0, #0
 8002d88:	e7f7      	b.n	8002d7a <__swsetup_r+0xba>
 8002d8a:	bf00      	nop
 8002d8c:	2000000c 	.word	0x2000000c
 8002d90:	08003c18 	.word	0x08003c18
 8002d94:	08003c38 	.word	0x08003c38
 8002d98:	08003bf8 	.word	0x08003bf8

08002d9c <__sflush_r>:
 8002d9c:	898a      	ldrh	r2, [r1, #12]
 8002d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da2:	4605      	mov	r5, r0
 8002da4:	0710      	lsls	r0, r2, #28
 8002da6:	460c      	mov	r4, r1
 8002da8:	d458      	bmi.n	8002e5c <__sflush_r+0xc0>
 8002daa:	684b      	ldr	r3, [r1, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	dc05      	bgt.n	8002dbc <__sflush_r+0x20>
 8002db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	dc02      	bgt.n	8002dbc <__sflush_r+0x20>
 8002db6:	2000      	movs	r0, #0
 8002db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dbe:	2e00      	cmp	r6, #0
 8002dc0:	d0f9      	beq.n	8002db6 <__sflush_r+0x1a>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002dc8:	682f      	ldr	r7, [r5, #0]
 8002dca:	602b      	str	r3, [r5, #0]
 8002dcc:	d032      	beq.n	8002e34 <__sflush_r+0x98>
 8002dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002dd0:	89a3      	ldrh	r3, [r4, #12]
 8002dd2:	075a      	lsls	r2, r3, #29
 8002dd4:	d505      	bpl.n	8002de2 <__sflush_r+0x46>
 8002dd6:	6863      	ldr	r3, [r4, #4]
 8002dd8:	1ac0      	subs	r0, r0, r3
 8002dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ddc:	b10b      	cbz	r3, 8002de2 <__sflush_r+0x46>
 8002dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002de0:	1ac0      	subs	r0, r0, r3
 8002de2:	2300      	movs	r3, #0
 8002de4:	4602      	mov	r2, r0
 8002de6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002de8:	6a21      	ldr	r1, [r4, #32]
 8002dea:	4628      	mov	r0, r5
 8002dec:	47b0      	blx	r6
 8002dee:	1c43      	adds	r3, r0, #1
 8002df0:	89a3      	ldrh	r3, [r4, #12]
 8002df2:	d106      	bne.n	8002e02 <__sflush_r+0x66>
 8002df4:	6829      	ldr	r1, [r5, #0]
 8002df6:	291d      	cmp	r1, #29
 8002df8:	d82c      	bhi.n	8002e54 <__sflush_r+0xb8>
 8002dfa:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <__sflush_r+0x108>)
 8002dfc:	40ca      	lsrs	r2, r1
 8002dfe:	07d6      	lsls	r6, r2, #31
 8002e00:	d528      	bpl.n	8002e54 <__sflush_r+0xb8>
 8002e02:	2200      	movs	r2, #0
 8002e04:	6062      	str	r2, [r4, #4]
 8002e06:	04d9      	lsls	r1, r3, #19
 8002e08:	6922      	ldr	r2, [r4, #16]
 8002e0a:	6022      	str	r2, [r4, #0]
 8002e0c:	d504      	bpl.n	8002e18 <__sflush_r+0x7c>
 8002e0e:	1c42      	adds	r2, r0, #1
 8002e10:	d101      	bne.n	8002e16 <__sflush_r+0x7a>
 8002e12:	682b      	ldr	r3, [r5, #0]
 8002e14:	b903      	cbnz	r3, 8002e18 <__sflush_r+0x7c>
 8002e16:	6560      	str	r0, [r4, #84]	; 0x54
 8002e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e1a:	602f      	str	r7, [r5, #0]
 8002e1c:	2900      	cmp	r1, #0
 8002e1e:	d0ca      	beq.n	8002db6 <__sflush_r+0x1a>
 8002e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e24:	4299      	cmp	r1, r3
 8002e26:	d002      	beq.n	8002e2e <__sflush_r+0x92>
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f9d7 	bl	80031dc <_free_r>
 8002e2e:	2000      	movs	r0, #0
 8002e30:	6360      	str	r0, [r4, #52]	; 0x34
 8002e32:	e7c1      	b.n	8002db8 <__sflush_r+0x1c>
 8002e34:	6a21      	ldr	r1, [r4, #32]
 8002e36:	2301      	movs	r3, #1
 8002e38:	4628      	mov	r0, r5
 8002e3a:	47b0      	blx	r6
 8002e3c:	1c41      	adds	r1, r0, #1
 8002e3e:	d1c7      	bne.n	8002dd0 <__sflush_r+0x34>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0c4      	beq.n	8002dd0 <__sflush_r+0x34>
 8002e46:	2b1d      	cmp	r3, #29
 8002e48:	d001      	beq.n	8002e4e <__sflush_r+0xb2>
 8002e4a:	2b16      	cmp	r3, #22
 8002e4c:	d101      	bne.n	8002e52 <__sflush_r+0xb6>
 8002e4e:	602f      	str	r7, [r5, #0]
 8002e50:	e7b1      	b.n	8002db6 <__sflush_r+0x1a>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e58:	81a3      	strh	r3, [r4, #12]
 8002e5a:	e7ad      	b.n	8002db8 <__sflush_r+0x1c>
 8002e5c:	690f      	ldr	r7, [r1, #16]
 8002e5e:	2f00      	cmp	r7, #0
 8002e60:	d0a9      	beq.n	8002db6 <__sflush_r+0x1a>
 8002e62:	0793      	lsls	r3, r2, #30
 8002e64:	680e      	ldr	r6, [r1, #0]
 8002e66:	bf08      	it	eq
 8002e68:	694b      	ldreq	r3, [r1, #20]
 8002e6a:	600f      	str	r7, [r1, #0]
 8002e6c:	bf18      	it	ne
 8002e6e:	2300      	movne	r3, #0
 8002e70:	eba6 0807 	sub.w	r8, r6, r7
 8002e74:	608b      	str	r3, [r1, #8]
 8002e76:	f1b8 0f00 	cmp.w	r8, #0
 8002e7a:	dd9c      	ble.n	8002db6 <__sflush_r+0x1a>
 8002e7c:	6a21      	ldr	r1, [r4, #32]
 8002e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e80:	4643      	mov	r3, r8
 8002e82:	463a      	mov	r2, r7
 8002e84:	4628      	mov	r0, r5
 8002e86:	47b0      	blx	r6
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	dc06      	bgt.n	8002e9a <__sflush_r+0xfe>
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e92:	81a3      	strh	r3, [r4, #12]
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	e78e      	b.n	8002db8 <__sflush_r+0x1c>
 8002e9a:	4407      	add	r7, r0
 8002e9c:	eba8 0800 	sub.w	r8, r8, r0
 8002ea0:	e7e9      	b.n	8002e76 <__sflush_r+0xda>
 8002ea2:	bf00      	nop
 8002ea4:	20400001 	.word	0x20400001

08002ea8 <_fflush_r>:
 8002ea8:	b538      	push	{r3, r4, r5, lr}
 8002eaa:	690b      	ldr	r3, [r1, #16]
 8002eac:	4605      	mov	r5, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	b913      	cbnz	r3, 8002eb8 <_fflush_r+0x10>
 8002eb2:	2500      	movs	r5, #0
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
 8002eb8:	b118      	cbz	r0, 8002ec2 <_fflush_r+0x1a>
 8002eba:	6983      	ldr	r3, [r0, #24]
 8002ebc:	b90b      	cbnz	r3, 8002ec2 <_fflush_r+0x1a>
 8002ebe:	f000 f887 	bl	8002fd0 <__sinit>
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <_fflush_r+0x6c>)
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	d11b      	bne.n	8002f00 <_fflush_r+0x58>
 8002ec8:	686c      	ldr	r4, [r5, #4]
 8002eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ef      	beq.n	8002eb2 <_fflush_r+0xa>
 8002ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ed4:	07d0      	lsls	r0, r2, #31
 8002ed6:	d404      	bmi.n	8002ee2 <_fflush_r+0x3a>
 8002ed8:	0599      	lsls	r1, r3, #22
 8002eda:	d402      	bmi.n	8002ee2 <_fflush_r+0x3a>
 8002edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ede:	f000 f915 	bl	800310c <__retarget_lock_acquire_recursive>
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	f7ff ff59 	bl	8002d9c <__sflush_r>
 8002eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eec:	07da      	lsls	r2, r3, #31
 8002eee:	4605      	mov	r5, r0
 8002ef0:	d4e0      	bmi.n	8002eb4 <_fflush_r+0xc>
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	059b      	lsls	r3, r3, #22
 8002ef6:	d4dd      	bmi.n	8002eb4 <_fflush_r+0xc>
 8002ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002efa:	f000 f908 	bl	800310e <__retarget_lock_release_recursive>
 8002efe:	e7d9      	b.n	8002eb4 <_fflush_r+0xc>
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <_fflush_r+0x70>)
 8002f02:	429c      	cmp	r4, r3
 8002f04:	d101      	bne.n	8002f0a <_fflush_r+0x62>
 8002f06:	68ac      	ldr	r4, [r5, #8]
 8002f08:	e7df      	b.n	8002eca <_fflush_r+0x22>
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <_fflush_r+0x74>)
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	bf08      	it	eq
 8002f10:	68ec      	ldreq	r4, [r5, #12]
 8002f12:	e7da      	b.n	8002eca <_fflush_r+0x22>
 8002f14:	08003c18 	.word	0x08003c18
 8002f18:	08003c38 	.word	0x08003c38
 8002f1c:	08003bf8 	.word	0x08003bf8

08002f20 <std>:
 8002f20:	2300      	movs	r3, #0
 8002f22:	b510      	push	{r4, lr}
 8002f24:	4604      	mov	r4, r0
 8002f26:	e9c0 3300 	strd	r3, r3, [r0]
 8002f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f2e:	6083      	str	r3, [r0, #8]
 8002f30:	8181      	strh	r1, [r0, #12]
 8002f32:	6643      	str	r3, [r0, #100]	; 0x64
 8002f34:	81c2      	strh	r2, [r0, #14]
 8002f36:	6183      	str	r3, [r0, #24]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	305c      	adds	r0, #92	; 0x5c
 8002f3e:	f7ff fdc1 	bl	8002ac4 <memset>
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <std+0x38>)
 8002f44:	6263      	str	r3, [r4, #36]	; 0x24
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <std+0x3c>)
 8002f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <std+0x40>)
 8002f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <std+0x44>)
 8002f50:	6224      	str	r4, [r4, #32]
 8002f52:	6323      	str	r3, [r4, #48]	; 0x30
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	bf00      	nop
 8002f58:	08003a29 	.word	0x08003a29
 8002f5c:	08003a4b 	.word	0x08003a4b
 8002f60:	08003a83 	.word	0x08003a83
 8002f64:	08003aa7 	.word	0x08003aa7

08002f68 <_cleanup_r>:
 8002f68:	4901      	ldr	r1, [pc, #4]	; (8002f70 <_cleanup_r+0x8>)
 8002f6a:	f000 b8af 	b.w	80030cc <_fwalk_reent>
 8002f6e:	bf00      	nop
 8002f70:	08002ea9 	.word	0x08002ea9

08002f74 <__sfmoreglue>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	2268      	movs	r2, #104	; 0x68
 8002f78:	1e4d      	subs	r5, r1, #1
 8002f7a:	4355      	muls	r5, r2
 8002f7c:	460e      	mov	r6, r1
 8002f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f82:	f000 f997 	bl	80032b4 <_malloc_r>
 8002f86:	4604      	mov	r4, r0
 8002f88:	b140      	cbz	r0, 8002f9c <__sfmoreglue+0x28>
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8002f90:	300c      	adds	r0, #12
 8002f92:	60a0      	str	r0, [r4, #8]
 8002f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f98:	f7ff fd94 	bl	8002ac4 <memset>
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}

08002fa0 <__sfp_lock_acquire>:
 8002fa0:	4801      	ldr	r0, [pc, #4]	; (8002fa8 <__sfp_lock_acquire+0x8>)
 8002fa2:	f000 b8b3 	b.w	800310c <__retarget_lock_acquire_recursive>
 8002fa6:	bf00      	nop
 8002fa8:	20000149 	.word	0x20000149

08002fac <__sfp_lock_release>:
 8002fac:	4801      	ldr	r0, [pc, #4]	; (8002fb4 <__sfp_lock_release+0x8>)
 8002fae:	f000 b8ae 	b.w	800310e <__retarget_lock_release_recursive>
 8002fb2:	bf00      	nop
 8002fb4:	20000149 	.word	0x20000149

08002fb8 <__sinit_lock_acquire>:
 8002fb8:	4801      	ldr	r0, [pc, #4]	; (8002fc0 <__sinit_lock_acquire+0x8>)
 8002fba:	f000 b8a7 	b.w	800310c <__retarget_lock_acquire_recursive>
 8002fbe:	bf00      	nop
 8002fc0:	2000014a 	.word	0x2000014a

08002fc4 <__sinit_lock_release>:
 8002fc4:	4801      	ldr	r0, [pc, #4]	; (8002fcc <__sinit_lock_release+0x8>)
 8002fc6:	f000 b8a2 	b.w	800310e <__retarget_lock_release_recursive>
 8002fca:	bf00      	nop
 8002fcc:	2000014a 	.word	0x2000014a

08002fd0 <__sinit>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	f7ff fff0 	bl	8002fb8 <__sinit_lock_acquire>
 8002fd8:	69a3      	ldr	r3, [r4, #24]
 8002fda:	b11b      	cbz	r3, 8002fe4 <__sinit+0x14>
 8002fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe0:	f7ff bff0 	b.w	8002fc4 <__sinit_lock_release>
 8002fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002fe8:	6523      	str	r3, [r4, #80]	; 0x50
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <__sinit+0x68>)
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <__sinit+0x6c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ff2:	42a3      	cmp	r3, r4
 8002ff4:	bf04      	itt	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	61a3      	streq	r3, [r4, #24]
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f000 f820 	bl	8003040 <__sfp>
 8003000:	6060      	str	r0, [r4, #4]
 8003002:	4620      	mov	r0, r4
 8003004:	f000 f81c 	bl	8003040 <__sfp>
 8003008:	60a0      	str	r0, [r4, #8]
 800300a:	4620      	mov	r0, r4
 800300c:	f000 f818 	bl	8003040 <__sfp>
 8003010:	2200      	movs	r2, #0
 8003012:	60e0      	str	r0, [r4, #12]
 8003014:	2104      	movs	r1, #4
 8003016:	6860      	ldr	r0, [r4, #4]
 8003018:	f7ff ff82 	bl	8002f20 <std>
 800301c:	68a0      	ldr	r0, [r4, #8]
 800301e:	2201      	movs	r2, #1
 8003020:	2109      	movs	r1, #9
 8003022:	f7ff ff7d 	bl	8002f20 <std>
 8003026:	68e0      	ldr	r0, [r4, #12]
 8003028:	2202      	movs	r2, #2
 800302a:	2112      	movs	r1, #18
 800302c:	f7ff ff78 	bl	8002f20 <std>
 8003030:	2301      	movs	r3, #1
 8003032:	61a3      	str	r3, [r4, #24]
 8003034:	e7d2      	b.n	8002fdc <__sinit+0xc>
 8003036:	bf00      	nop
 8003038:	08003bf4 	.word	0x08003bf4
 800303c:	08002f69 	.word	0x08002f69

08003040 <__sfp>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	4607      	mov	r7, r0
 8003044:	f7ff ffac 	bl	8002fa0 <__sfp_lock_acquire>
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <__sfp+0x84>)
 800304a:	681e      	ldr	r6, [r3, #0]
 800304c:	69b3      	ldr	r3, [r6, #24]
 800304e:	b913      	cbnz	r3, 8003056 <__sfp+0x16>
 8003050:	4630      	mov	r0, r6
 8003052:	f7ff ffbd 	bl	8002fd0 <__sinit>
 8003056:	3648      	adds	r6, #72	; 0x48
 8003058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800305c:	3b01      	subs	r3, #1
 800305e:	d503      	bpl.n	8003068 <__sfp+0x28>
 8003060:	6833      	ldr	r3, [r6, #0]
 8003062:	b30b      	cbz	r3, 80030a8 <__sfp+0x68>
 8003064:	6836      	ldr	r6, [r6, #0]
 8003066:	e7f7      	b.n	8003058 <__sfp+0x18>
 8003068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800306c:	b9d5      	cbnz	r5, 80030a4 <__sfp+0x64>
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <__sfp+0x88>)
 8003070:	60e3      	str	r3, [r4, #12]
 8003072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003076:	6665      	str	r5, [r4, #100]	; 0x64
 8003078:	f000 f847 	bl	800310a <__retarget_lock_init_recursive>
 800307c:	f7ff ff96 	bl	8002fac <__sfp_lock_release>
 8003080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003088:	6025      	str	r5, [r4, #0]
 800308a:	61a5      	str	r5, [r4, #24]
 800308c:	2208      	movs	r2, #8
 800308e:	4629      	mov	r1, r5
 8003090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003094:	f7ff fd16 	bl	8002ac4 <memset>
 8003098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800309c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80030a0:	4620      	mov	r0, r4
 80030a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030a4:	3468      	adds	r4, #104	; 0x68
 80030a6:	e7d9      	b.n	800305c <__sfp+0x1c>
 80030a8:	2104      	movs	r1, #4
 80030aa:	4638      	mov	r0, r7
 80030ac:	f7ff ff62 	bl	8002f74 <__sfmoreglue>
 80030b0:	4604      	mov	r4, r0
 80030b2:	6030      	str	r0, [r6, #0]
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d1d5      	bne.n	8003064 <__sfp+0x24>
 80030b8:	f7ff ff78 	bl	8002fac <__sfp_lock_release>
 80030bc:	230c      	movs	r3, #12
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	e7ee      	b.n	80030a0 <__sfp+0x60>
 80030c2:	bf00      	nop
 80030c4:	08003bf4 	.word	0x08003bf4
 80030c8:	ffff0001 	.word	0xffff0001

080030cc <_fwalk_reent>:
 80030cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030d0:	4606      	mov	r6, r0
 80030d2:	4688      	mov	r8, r1
 80030d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030d8:	2700      	movs	r7, #0
 80030da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030de:	f1b9 0901 	subs.w	r9, r9, #1
 80030e2:	d505      	bpl.n	80030f0 <_fwalk_reent+0x24>
 80030e4:	6824      	ldr	r4, [r4, #0]
 80030e6:	2c00      	cmp	r4, #0
 80030e8:	d1f7      	bne.n	80030da <_fwalk_reent+0xe>
 80030ea:	4638      	mov	r0, r7
 80030ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030f0:	89ab      	ldrh	r3, [r5, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d907      	bls.n	8003106 <_fwalk_reent+0x3a>
 80030f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030fa:	3301      	adds	r3, #1
 80030fc:	d003      	beq.n	8003106 <_fwalk_reent+0x3a>
 80030fe:	4629      	mov	r1, r5
 8003100:	4630      	mov	r0, r6
 8003102:	47c0      	blx	r8
 8003104:	4307      	orrs	r7, r0
 8003106:	3568      	adds	r5, #104	; 0x68
 8003108:	e7e9      	b.n	80030de <_fwalk_reent+0x12>

0800310a <__retarget_lock_init_recursive>:
 800310a:	4770      	bx	lr

0800310c <__retarget_lock_acquire_recursive>:
 800310c:	4770      	bx	lr

0800310e <__retarget_lock_release_recursive>:
 800310e:	4770      	bx	lr

08003110 <__swhatbuf_r>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	460e      	mov	r6, r1
 8003114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003118:	2900      	cmp	r1, #0
 800311a:	b096      	sub	sp, #88	; 0x58
 800311c:	4614      	mov	r4, r2
 800311e:	461d      	mov	r5, r3
 8003120:	da08      	bge.n	8003134 <__swhatbuf_r+0x24>
 8003122:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	602a      	str	r2, [r5, #0]
 800312a:	061a      	lsls	r2, r3, #24
 800312c:	d410      	bmi.n	8003150 <__swhatbuf_r+0x40>
 800312e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003132:	e00e      	b.n	8003152 <__swhatbuf_r+0x42>
 8003134:	466a      	mov	r2, sp
 8003136:	f000 fcdd 	bl	8003af4 <_fstat_r>
 800313a:	2800      	cmp	r0, #0
 800313c:	dbf1      	blt.n	8003122 <__swhatbuf_r+0x12>
 800313e:	9a01      	ldr	r2, [sp, #4]
 8003140:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003144:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003148:	425a      	negs	r2, r3
 800314a:	415a      	adcs	r2, r3
 800314c:	602a      	str	r2, [r5, #0]
 800314e:	e7ee      	b.n	800312e <__swhatbuf_r+0x1e>
 8003150:	2340      	movs	r3, #64	; 0x40
 8003152:	2000      	movs	r0, #0
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	b016      	add	sp, #88	; 0x58
 8003158:	bd70      	pop	{r4, r5, r6, pc}
	...

0800315c <__smakebuf_r>:
 800315c:	898b      	ldrh	r3, [r1, #12]
 800315e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003160:	079d      	lsls	r5, r3, #30
 8003162:	4606      	mov	r6, r0
 8003164:	460c      	mov	r4, r1
 8003166:	d507      	bpl.n	8003178 <__smakebuf_r+0x1c>
 8003168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	6123      	str	r3, [r4, #16]
 8003170:	2301      	movs	r3, #1
 8003172:	6163      	str	r3, [r4, #20]
 8003174:	b002      	add	sp, #8
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	ab01      	add	r3, sp, #4
 800317a:	466a      	mov	r2, sp
 800317c:	f7ff ffc8 	bl	8003110 <__swhatbuf_r>
 8003180:	9900      	ldr	r1, [sp, #0]
 8003182:	4605      	mov	r5, r0
 8003184:	4630      	mov	r0, r6
 8003186:	f000 f895 	bl	80032b4 <_malloc_r>
 800318a:	b948      	cbnz	r0, 80031a0 <__smakebuf_r+0x44>
 800318c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003190:	059a      	lsls	r2, r3, #22
 8003192:	d4ef      	bmi.n	8003174 <__smakebuf_r+0x18>
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	81a3      	strh	r3, [r4, #12]
 800319e:	e7e3      	b.n	8003168 <__smakebuf_r+0xc>
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <__smakebuf_r+0x7c>)
 80031a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	6020      	str	r0, [r4, #0]
 80031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	9b00      	ldr	r3, [sp, #0]
 80031b0:	6163      	str	r3, [r4, #20]
 80031b2:	9b01      	ldr	r3, [sp, #4]
 80031b4:	6120      	str	r0, [r4, #16]
 80031b6:	b15b      	cbz	r3, 80031d0 <__smakebuf_r+0x74>
 80031b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031bc:	4630      	mov	r0, r6
 80031be:	f000 fcab 	bl	8003b18 <_isatty_r>
 80031c2:	b128      	cbz	r0, 80031d0 <__smakebuf_r+0x74>
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	81a3      	strh	r3, [r4, #12]
 80031d0:	89a0      	ldrh	r0, [r4, #12]
 80031d2:	4305      	orrs	r5, r0
 80031d4:	81a5      	strh	r5, [r4, #12]
 80031d6:	e7cd      	b.n	8003174 <__smakebuf_r+0x18>
 80031d8:	08002f69 	.word	0x08002f69

080031dc <_free_r>:
 80031dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031de:	2900      	cmp	r1, #0
 80031e0:	d044      	beq.n	800326c <_free_r+0x90>
 80031e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031e6:	9001      	str	r0, [sp, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f1a1 0404 	sub.w	r4, r1, #4
 80031ee:	bfb8      	it	lt
 80031f0:	18e4      	addlt	r4, r4, r3
 80031f2:	f000 fcb3 	bl	8003b5c <__malloc_lock>
 80031f6:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <_free_r+0x94>)
 80031f8:	9801      	ldr	r0, [sp, #4]
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	b933      	cbnz	r3, 800320c <_free_r+0x30>
 80031fe:	6063      	str	r3, [r4, #4]
 8003200:	6014      	str	r4, [r2, #0]
 8003202:	b003      	add	sp, #12
 8003204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003208:	f000 bcae 	b.w	8003b68 <__malloc_unlock>
 800320c:	42a3      	cmp	r3, r4
 800320e:	d908      	bls.n	8003222 <_free_r+0x46>
 8003210:	6825      	ldr	r5, [r4, #0]
 8003212:	1961      	adds	r1, r4, r5
 8003214:	428b      	cmp	r3, r1
 8003216:	bf01      	itttt	eq
 8003218:	6819      	ldreq	r1, [r3, #0]
 800321a:	685b      	ldreq	r3, [r3, #4]
 800321c:	1949      	addeq	r1, r1, r5
 800321e:	6021      	streq	r1, [r4, #0]
 8003220:	e7ed      	b.n	80031fe <_free_r+0x22>
 8003222:	461a      	mov	r2, r3
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	b10b      	cbz	r3, 800322c <_free_r+0x50>
 8003228:	42a3      	cmp	r3, r4
 800322a:	d9fa      	bls.n	8003222 <_free_r+0x46>
 800322c:	6811      	ldr	r1, [r2, #0]
 800322e:	1855      	adds	r5, r2, r1
 8003230:	42a5      	cmp	r5, r4
 8003232:	d10b      	bne.n	800324c <_free_r+0x70>
 8003234:	6824      	ldr	r4, [r4, #0]
 8003236:	4421      	add	r1, r4
 8003238:	1854      	adds	r4, r2, r1
 800323a:	42a3      	cmp	r3, r4
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	d1e0      	bne.n	8003202 <_free_r+0x26>
 8003240:	681c      	ldr	r4, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	6053      	str	r3, [r2, #4]
 8003246:	4421      	add	r1, r4
 8003248:	6011      	str	r1, [r2, #0]
 800324a:	e7da      	b.n	8003202 <_free_r+0x26>
 800324c:	d902      	bls.n	8003254 <_free_r+0x78>
 800324e:	230c      	movs	r3, #12
 8003250:	6003      	str	r3, [r0, #0]
 8003252:	e7d6      	b.n	8003202 <_free_r+0x26>
 8003254:	6825      	ldr	r5, [r4, #0]
 8003256:	1961      	adds	r1, r4, r5
 8003258:	428b      	cmp	r3, r1
 800325a:	bf04      	itt	eq
 800325c:	6819      	ldreq	r1, [r3, #0]
 800325e:	685b      	ldreq	r3, [r3, #4]
 8003260:	6063      	str	r3, [r4, #4]
 8003262:	bf04      	itt	eq
 8003264:	1949      	addeq	r1, r1, r5
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	6054      	str	r4, [r2, #4]
 800326a:	e7ca      	b.n	8003202 <_free_r+0x26>
 800326c:	b003      	add	sp, #12
 800326e:	bd30      	pop	{r4, r5, pc}
 8003270:	2000014c 	.word	0x2000014c

08003274 <sbrk_aligned>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	4e0e      	ldr	r6, [pc, #56]	; (80032b0 <sbrk_aligned+0x3c>)
 8003278:	460c      	mov	r4, r1
 800327a:	6831      	ldr	r1, [r6, #0]
 800327c:	4605      	mov	r5, r0
 800327e:	b911      	cbnz	r1, 8003286 <sbrk_aligned+0x12>
 8003280:	f000 fbc2 	bl	8003a08 <_sbrk_r>
 8003284:	6030      	str	r0, [r6, #0]
 8003286:	4621      	mov	r1, r4
 8003288:	4628      	mov	r0, r5
 800328a:	f000 fbbd 	bl	8003a08 <_sbrk_r>
 800328e:	1c43      	adds	r3, r0, #1
 8003290:	d00a      	beq.n	80032a8 <sbrk_aligned+0x34>
 8003292:	1cc4      	adds	r4, r0, #3
 8003294:	f024 0403 	bic.w	r4, r4, #3
 8003298:	42a0      	cmp	r0, r4
 800329a:	d007      	beq.n	80032ac <sbrk_aligned+0x38>
 800329c:	1a21      	subs	r1, r4, r0
 800329e:	4628      	mov	r0, r5
 80032a0:	f000 fbb2 	bl	8003a08 <_sbrk_r>
 80032a4:	3001      	adds	r0, #1
 80032a6:	d101      	bne.n	80032ac <sbrk_aligned+0x38>
 80032a8:	f04f 34ff 	mov.w	r4, #4294967295
 80032ac:	4620      	mov	r0, r4
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
 80032b0:	20000150 	.word	0x20000150

080032b4 <_malloc_r>:
 80032b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b8:	1ccd      	adds	r5, r1, #3
 80032ba:	f025 0503 	bic.w	r5, r5, #3
 80032be:	3508      	adds	r5, #8
 80032c0:	2d0c      	cmp	r5, #12
 80032c2:	bf38      	it	cc
 80032c4:	250c      	movcc	r5, #12
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	4607      	mov	r7, r0
 80032ca:	db01      	blt.n	80032d0 <_malloc_r+0x1c>
 80032cc:	42a9      	cmp	r1, r5
 80032ce:	d905      	bls.n	80032dc <_malloc_r+0x28>
 80032d0:	230c      	movs	r3, #12
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	2600      	movs	r6, #0
 80032d6:	4630      	mov	r0, r6
 80032d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032dc:	4e2e      	ldr	r6, [pc, #184]	; (8003398 <_malloc_r+0xe4>)
 80032de:	f000 fc3d 	bl	8003b5c <__malloc_lock>
 80032e2:	6833      	ldr	r3, [r6, #0]
 80032e4:	461c      	mov	r4, r3
 80032e6:	bb34      	cbnz	r4, 8003336 <_malloc_r+0x82>
 80032e8:	4629      	mov	r1, r5
 80032ea:	4638      	mov	r0, r7
 80032ec:	f7ff ffc2 	bl	8003274 <sbrk_aligned>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	4604      	mov	r4, r0
 80032f4:	d14d      	bne.n	8003392 <_malloc_r+0xde>
 80032f6:	6834      	ldr	r4, [r6, #0]
 80032f8:	4626      	mov	r6, r4
 80032fa:	2e00      	cmp	r6, #0
 80032fc:	d140      	bne.n	8003380 <_malloc_r+0xcc>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	4631      	mov	r1, r6
 8003302:	4638      	mov	r0, r7
 8003304:	eb04 0803 	add.w	r8, r4, r3
 8003308:	f000 fb7e 	bl	8003a08 <_sbrk_r>
 800330c:	4580      	cmp	r8, r0
 800330e:	d13a      	bne.n	8003386 <_malloc_r+0xd2>
 8003310:	6821      	ldr	r1, [r4, #0]
 8003312:	3503      	adds	r5, #3
 8003314:	1a6d      	subs	r5, r5, r1
 8003316:	f025 0503 	bic.w	r5, r5, #3
 800331a:	3508      	adds	r5, #8
 800331c:	2d0c      	cmp	r5, #12
 800331e:	bf38      	it	cc
 8003320:	250c      	movcc	r5, #12
 8003322:	4629      	mov	r1, r5
 8003324:	4638      	mov	r0, r7
 8003326:	f7ff ffa5 	bl	8003274 <sbrk_aligned>
 800332a:	3001      	adds	r0, #1
 800332c:	d02b      	beq.n	8003386 <_malloc_r+0xd2>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	442b      	add	r3, r5
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	e00e      	b.n	8003354 <_malloc_r+0xa0>
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	1b52      	subs	r2, r2, r5
 800333a:	d41e      	bmi.n	800337a <_malloc_r+0xc6>
 800333c:	2a0b      	cmp	r2, #11
 800333e:	d916      	bls.n	800336e <_malloc_r+0xba>
 8003340:	1961      	adds	r1, r4, r5
 8003342:	42a3      	cmp	r3, r4
 8003344:	6025      	str	r5, [r4, #0]
 8003346:	bf18      	it	ne
 8003348:	6059      	strne	r1, [r3, #4]
 800334a:	6863      	ldr	r3, [r4, #4]
 800334c:	bf08      	it	eq
 800334e:	6031      	streq	r1, [r6, #0]
 8003350:	5162      	str	r2, [r4, r5]
 8003352:	604b      	str	r3, [r1, #4]
 8003354:	4638      	mov	r0, r7
 8003356:	f104 060b 	add.w	r6, r4, #11
 800335a:	f000 fc05 	bl	8003b68 <__malloc_unlock>
 800335e:	f026 0607 	bic.w	r6, r6, #7
 8003362:	1d23      	adds	r3, r4, #4
 8003364:	1af2      	subs	r2, r6, r3
 8003366:	d0b6      	beq.n	80032d6 <_malloc_r+0x22>
 8003368:	1b9b      	subs	r3, r3, r6
 800336a:	50a3      	str	r3, [r4, r2]
 800336c:	e7b3      	b.n	80032d6 <_malloc_r+0x22>
 800336e:	6862      	ldr	r2, [r4, #4]
 8003370:	42a3      	cmp	r3, r4
 8003372:	bf0c      	ite	eq
 8003374:	6032      	streq	r2, [r6, #0]
 8003376:	605a      	strne	r2, [r3, #4]
 8003378:	e7ec      	b.n	8003354 <_malloc_r+0xa0>
 800337a:	4623      	mov	r3, r4
 800337c:	6864      	ldr	r4, [r4, #4]
 800337e:	e7b2      	b.n	80032e6 <_malloc_r+0x32>
 8003380:	4634      	mov	r4, r6
 8003382:	6876      	ldr	r6, [r6, #4]
 8003384:	e7b9      	b.n	80032fa <_malloc_r+0x46>
 8003386:	230c      	movs	r3, #12
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	4638      	mov	r0, r7
 800338c:	f000 fbec 	bl	8003b68 <__malloc_unlock>
 8003390:	e7a1      	b.n	80032d6 <_malloc_r+0x22>
 8003392:	6025      	str	r5, [r4, #0]
 8003394:	e7de      	b.n	8003354 <_malloc_r+0xa0>
 8003396:	bf00      	nop
 8003398:	2000014c 	.word	0x2000014c

0800339c <__sfputc_r>:
 800339c:	6893      	ldr	r3, [r2, #8]
 800339e:	3b01      	subs	r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	b410      	push	{r4}
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	da08      	bge.n	80033ba <__sfputc_r+0x1e>
 80033a8:	6994      	ldr	r4, [r2, #24]
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	db01      	blt.n	80033b2 <__sfputc_r+0x16>
 80033ae:	290a      	cmp	r1, #10
 80033b0:	d103      	bne.n	80033ba <__sfputc_r+0x1e>
 80033b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033b6:	f7ff bc31 	b.w	8002c1c <__swbuf_r>
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	1c58      	adds	r0, r3, #1
 80033be:	6010      	str	r0, [r2, #0]
 80033c0:	7019      	strb	r1, [r3, #0]
 80033c2:	4608      	mov	r0, r1
 80033c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <__sfputs_r>:
 80033ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033cc:	4606      	mov	r6, r0
 80033ce:	460f      	mov	r7, r1
 80033d0:	4614      	mov	r4, r2
 80033d2:	18d5      	adds	r5, r2, r3
 80033d4:	42ac      	cmp	r4, r5
 80033d6:	d101      	bne.n	80033dc <__sfputs_r+0x12>
 80033d8:	2000      	movs	r0, #0
 80033da:	e007      	b.n	80033ec <__sfputs_r+0x22>
 80033dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e0:	463a      	mov	r2, r7
 80033e2:	4630      	mov	r0, r6
 80033e4:	f7ff ffda 	bl	800339c <__sfputc_r>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	d1f3      	bne.n	80033d4 <__sfputs_r+0xa>
 80033ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033f0 <_vfiprintf_r>:
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	460d      	mov	r5, r1
 80033f6:	b09d      	sub	sp, #116	; 0x74
 80033f8:	4614      	mov	r4, r2
 80033fa:	4698      	mov	r8, r3
 80033fc:	4606      	mov	r6, r0
 80033fe:	b118      	cbz	r0, 8003408 <_vfiprintf_r+0x18>
 8003400:	6983      	ldr	r3, [r0, #24]
 8003402:	b90b      	cbnz	r3, 8003408 <_vfiprintf_r+0x18>
 8003404:	f7ff fde4 	bl	8002fd0 <__sinit>
 8003408:	4b89      	ldr	r3, [pc, #548]	; (8003630 <_vfiprintf_r+0x240>)
 800340a:	429d      	cmp	r5, r3
 800340c:	d11b      	bne.n	8003446 <_vfiprintf_r+0x56>
 800340e:	6875      	ldr	r5, [r6, #4]
 8003410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003412:	07d9      	lsls	r1, r3, #31
 8003414:	d405      	bmi.n	8003422 <_vfiprintf_r+0x32>
 8003416:	89ab      	ldrh	r3, [r5, #12]
 8003418:	059a      	lsls	r2, r3, #22
 800341a:	d402      	bmi.n	8003422 <_vfiprintf_r+0x32>
 800341c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800341e:	f7ff fe75 	bl	800310c <__retarget_lock_acquire_recursive>
 8003422:	89ab      	ldrh	r3, [r5, #12]
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	d501      	bpl.n	800342c <_vfiprintf_r+0x3c>
 8003428:	692b      	ldr	r3, [r5, #16]
 800342a:	b9eb      	cbnz	r3, 8003468 <_vfiprintf_r+0x78>
 800342c:	4629      	mov	r1, r5
 800342e:	4630      	mov	r0, r6
 8003430:	f7ff fc46 	bl	8002cc0 <__swsetup_r>
 8003434:	b1c0      	cbz	r0, 8003468 <_vfiprintf_r+0x78>
 8003436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003438:	07dc      	lsls	r4, r3, #31
 800343a:	d50e      	bpl.n	800345a <_vfiprintf_r+0x6a>
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	b01d      	add	sp, #116	; 0x74
 8003442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003446:	4b7b      	ldr	r3, [pc, #492]	; (8003634 <_vfiprintf_r+0x244>)
 8003448:	429d      	cmp	r5, r3
 800344a:	d101      	bne.n	8003450 <_vfiprintf_r+0x60>
 800344c:	68b5      	ldr	r5, [r6, #8]
 800344e:	e7df      	b.n	8003410 <_vfiprintf_r+0x20>
 8003450:	4b79      	ldr	r3, [pc, #484]	; (8003638 <_vfiprintf_r+0x248>)
 8003452:	429d      	cmp	r5, r3
 8003454:	bf08      	it	eq
 8003456:	68f5      	ldreq	r5, [r6, #12]
 8003458:	e7da      	b.n	8003410 <_vfiprintf_r+0x20>
 800345a:	89ab      	ldrh	r3, [r5, #12]
 800345c:	0598      	lsls	r0, r3, #22
 800345e:	d4ed      	bmi.n	800343c <_vfiprintf_r+0x4c>
 8003460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003462:	f7ff fe54 	bl	800310e <__retarget_lock_release_recursive>
 8003466:	e7e9      	b.n	800343c <_vfiprintf_r+0x4c>
 8003468:	2300      	movs	r3, #0
 800346a:	9309      	str	r3, [sp, #36]	; 0x24
 800346c:	2320      	movs	r3, #32
 800346e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003472:	f8cd 800c 	str.w	r8, [sp, #12]
 8003476:	2330      	movs	r3, #48	; 0x30
 8003478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800363c <_vfiprintf_r+0x24c>
 800347c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003480:	f04f 0901 	mov.w	r9, #1
 8003484:	4623      	mov	r3, r4
 8003486:	469a      	mov	sl, r3
 8003488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800348c:	b10a      	cbz	r2, 8003492 <_vfiprintf_r+0xa2>
 800348e:	2a25      	cmp	r2, #37	; 0x25
 8003490:	d1f9      	bne.n	8003486 <_vfiprintf_r+0x96>
 8003492:	ebba 0b04 	subs.w	fp, sl, r4
 8003496:	d00b      	beq.n	80034b0 <_vfiprintf_r+0xc0>
 8003498:	465b      	mov	r3, fp
 800349a:	4622      	mov	r2, r4
 800349c:	4629      	mov	r1, r5
 800349e:	4630      	mov	r0, r6
 80034a0:	f7ff ff93 	bl	80033ca <__sfputs_r>
 80034a4:	3001      	adds	r0, #1
 80034a6:	f000 80aa 	beq.w	80035fe <_vfiprintf_r+0x20e>
 80034aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034ac:	445a      	add	r2, fp
 80034ae:	9209      	str	r2, [sp, #36]	; 0x24
 80034b0:	f89a 3000 	ldrb.w	r3, [sl]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80a2 	beq.w	80035fe <_vfiprintf_r+0x20e>
 80034ba:	2300      	movs	r3, #0
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034c4:	f10a 0a01 	add.w	sl, sl, #1
 80034c8:	9304      	str	r3, [sp, #16]
 80034ca:	9307      	str	r3, [sp, #28]
 80034cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034d0:	931a      	str	r3, [sp, #104]	; 0x68
 80034d2:	4654      	mov	r4, sl
 80034d4:	2205      	movs	r2, #5
 80034d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034da:	4858      	ldr	r0, [pc, #352]	; (800363c <_vfiprintf_r+0x24c>)
 80034dc:	f7fc fe98 	bl	8000210 <memchr>
 80034e0:	9a04      	ldr	r2, [sp, #16]
 80034e2:	b9d8      	cbnz	r0, 800351c <_vfiprintf_r+0x12c>
 80034e4:	06d1      	lsls	r1, r2, #27
 80034e6:	bf44      	itt	mi
 80034e8:	2320      	movmi	r3, #32
 80034ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ee:	0713      	lsls	r3, r2, #28
 80034f0:	bf44      	itt	mi
 80034f2:	232b      	movmi	r3, #43	; 0x2b
 80034f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034f8:	f89a 3000 	ldrb.w	r3, [sl]
 80034fc:	2b2a      	cmp	r3, #42	; 0x2a
 80034fe:	d015      	beq.n	800352c <_vfiprintf_r+0x13c>
 8003500:	9a07      	ldr	r2, [sp, #28]
 8003502:	4654      	mov	r4, sl
 8003504:	2000      	movs	r0, #0
 8003506:	f04f 0c0a 	mov.w	ip, #10
 800350a:	4621      	mov	r1, r4
 800350c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003510:	3b30      	subs	r3, #48	; 0x30
 8003512:	2b09      	cmp	r3, #9
 8003514:	d94e      	bls.n	80035b4 <_vfiprintf_r+0x1c4>
 8003516:	b1b0      	cbz	r0, 8003546 <_vfiprintf_r+0x156>
 8003518:	9207      	str	r2, [sp, #28]
 800351a:	e014      	b.n	8003546 <_vfiprintf_r+0x156>
 800351c:	eba0 0308 	sub.w	r3, r0, r8
 8003520:	fa09 f303 	lsl.w	r3, r9, r3
 8003524:	4313      	orrs	r3, r2
 8003526:	9304      	str	r3, [sp, #16]
 8003528:	46a2      	mov	sl, r4
 800352a:	e7d2      	b.n	80034d2 <_vfiprintf_r+0xe2>
 800352c:	9b03      	ldr	r3, [sp, #12]
 800352e:	1d19      	adds	r1, r3, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	9103      	str	r1, [sp, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	bfbb      	ittet	lt
 8003538:	425b      	neglt	r3, r3
 800353a:	f042 0202 	orrlt.w	r2, r2, #2
 800353e:	9307      	strge	r3, [sp, #28]
 8003540:	9307      	strlt	r3, [sp, #28]
 8003542:	bfb8      	it	lt
 8003544:	9204      	strlt	r2, [sp, #16]
 8003546:	7823      	ldrb	r3, [r4, #0]
 8003548:	2b2e      	cmp	r3, #46	; 0x2e
 800354a:	d10c      	bne.n	8003566 <_vfiprintf_r+0x176>
 800354c:	7863      	ldrb	r3, [r4, #1]
 800354e:	2b2a      	cmp	r3, #42	; 0x2a
 8003550:	d135      	bne.n	80035be <_vfiprintf_r+0x1ce>
 8003552:	9b03      	ldr	r3, [sp, #12]
 8003554:	1d1a      	adds	r2, r3, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	9203      	str	r2, [sp, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	bfb8      	it	lt
 800355e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003562:	3402      	adds	r4, #2
 8003564:	9305      	str	r3, [sp, #20]
 8003566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800364c <_vfiprintf_r+0x25c>
 800356a:	7821      	ldrb	r1, [r4, #0]
 800356c:	2203      	movs	r2, #3
 800356e:	4650      	mov	r0, sl
 8003570:	f7fc fe4e 	bl	8000210 <memchr>
 8003574:	b140      	cbz	r0, 8003588 <_vfiprintf_r+0x198>
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	eba0 000a 	sub.w	r0, r0, sl
 800357c:	fa03 f000 	lsl.w	r0, r3, r0
 8003580:	9b04      	ldr	r3, [sp, #16]
 8003582:	4303      	orrs	r3, r0
 8003584:	3401      	adds	r4, #1
 8003586:	9304      	str	r3, [sp, #16]
 8003588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800358c:	482c      	ldr	r0, [pc, #176]	; (8003640 <_vfiprintf_r+0x250>)
 800358e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003592:	2206      	movs	r2, #6
 8003594:	f7fc fe3c 	bl	8000210 <memchr>
 8003598:	2800      	cmp	r0, #0
 800359a:	d03f      	beq.n	800361c <_vfiprintf_r+0x22c>
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <_vfiprintf_r+0x254>)
 800359e:	bb1b      	cbnz	r3, 80035e8 <_vfiprintf_r+0x1f8>
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	3307      	adds	r3, #7
 80035a4:	f023 0307 	bic.w	r3, r3, #7
 80035a8:	3308      	adds	r3, #8
 80035aa:	9303      	str	r3, [sp, #12]
 80035ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ae:	443b      	add	r3, r7
 80035b0:	9309      	str	r3, [sp, #36]	; 0x24
 80035b2:	e767      	b.n	8003484 <_vfiprintf_r+0x94>
 80035b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80035b8:	460c      	mov	r4, r1
 80035ba:	2001      	movs	r0, #1
 80035bc:	e7a5      	b.n	800350a <_vfiprintf_r+0x11a>
 80035be:	2300      	movs	r3, #0
 80035c0:	3401      	adds	r4, #1
 80035c2:	9305      	str	r3, [sp, #20]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f04f 0c0a 	mov.w	ip, #10
 80035ca:	4620      	mov	r0, r4
 80035cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035d0:	3a30      	subs	r2, #48	; 0x30
 80035d2:	2a09      	cmp	r2, #9
 80035d4:	d903      	bls.n	80035de <_vfiprintf_r+0x1ee>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0c5      	beq.n	8003566 <_vfiprintf_r+0x176>
 80035da:	9105      	str	r1, [sp, #20]
 80035dc:	e7c3      	b.n	8003566 <_vfiprintf_r+0x176>
 80035de:	fb0c 2101 	mla	r1, ip, r1, r2
 80035e2:	4604      	mov	r4, r0
 80035e4:	2301      	movs	r3, #1
 80035e6:	e7f0      	b.n	80035ca <_vfiprintf_r+0x1da>
 80035e8:	ab03      	add	r3, sp, #12
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	462a      	mov	r2, r5
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <_vfiprintf_r+0x258>)
 80035f0:	a904      	add	r1, sp, #16
 80035f2:	4630      	mov	r0, r6
 80035f4:	f3af 8000 	nop.w
 80035f8:	4607      	mov	r7, r0
 80035fa:	1c78      	adds	r0, r7, #1
 80035fc:	d1d6      	bne.n	80035ac <_vfiprintf_r+0x1bc>
 80035fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003600:	07d9      	lsls	r1, r3, #31
 8003602:	d405      	bmi.n	8003610 <_vfiprintf_r+0x220>
 8003604:	89ab      	ldrh	r3, [r5, #12]
 8003606:	059a      	lsls	r2, r3, #22
 8003608:	d402      	bmi.n	8003610 <_vfiprintf_r+0x220>
 800360a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800360c:	f7ff fd7f 	bl	800310e <__retarget_lock_release_recursive>
 8003610:	89ab      	ldrh	r3, [r5, #12]
 8003612:	065b      	lsls	r3, r3, #25
 8003614:	f53f af12 	bmi.w	800343c <_vfiprintf_r+0x4c>
 8003618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800361a:	e711      	b.n	8003440 <_vfiprintf_r+0x50>
 800361c:	ab03      	add	r3, sp, #12
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	462a      	mov	r2, r5
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <_vfiprintf_r+0x258>)
 8003624:	a904      	add	r1, sp, #16
 8003626:	4630      	mov	r0, r6
 8003628:	f000 f880 	bl	800372c <_printf_i>
 800362c:	e7e4      	b.n	80035f8 <_vfiprintf_r+0x208>
 800362e:	bf00      	nop
 8003630:	08003c18 	.word	0x08003c18
 8003634:	08003c38 	.word	0x08003c38
 8003638:	08003bf8 	.word	0x08003bf8
 800363c:	08003c58 	.word	0x08003c58
 8003640:	08003c62 	.word	0x08003c62
 8003644:	00000000 	.word	0x00000000
 8003648:	080033cb 	.word	0x080033cb
 800364c:	08003c5e 	.word	0x08003c5e

08003650 <_printf_common>:
 8003650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	4616      	mov	r6, r2
 8003656:	4699      	mov	r9, r3
 8003658:	688a      	ldr	r2, [r1, #8]
 800365a:	690b      	ldr	r3, [r1, #16]
 800365c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003660:	4293      	cmp	r3, r2
 8003662:	bfb8      	it	lt
 8003664:	4613      	movlt	r3, r2
 8003666:	6033      	str	r3, [r6, #0]
 8003668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800366c:	4607      	mov	r7, r0
 800366e:	460c      	mov	r4, r1
 8003670:	b10a      	cbz	r2, 8003676 <_printf_common+0x26>
 8003672:	3301      	adds	r3, #1
 8003674:	6033      	str	r3, [r6, #0]
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	0699      	lsls	r1, r3, #26
 800367a:	bf42      	ittt	mi
 800367c:	6833      	ldrmi	r3, [r6, #0]
 800367e:	3302      	addmi	r3, #2
 8003680:	6033      	strmi	r3, [r6, #0]
 8003682:	6825      	ldr	r5, [r4, #0]
 8003684:	f015 0506 	ands.w	r5, r5, #6
 8003688:	d106      	bne.n	8003698 <_printf_common+0x48>
 800368a:	f104 0a19 	add.w	sl, r4, #25
 800368e:	68e3      	ldr	r3, [r4, #12]
 8003690:	6832      	ldr	r2, [r6, #0]
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	42ab      	cmp	r3, r5
 8003696:	dc26      	bgt.n	80036e6 <_printf_common+0x96>
 8003698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800369c:	1e13      	subs	r3, r2, #0
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	bf18      	it	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	0692      	lsls	r2, r2, #26
 80036a6:	d42b      	bmi.n	8003700 <_printf_common+0xb0>
 80036a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ac:	4649      	mov	r1, r9
 80036ae:	4638      	mov	r0, r7
 80036b0:	47c0      	blx	r8
 80036b2:	3001      	adds	r0, #1
 80036b4:	d01e      	beq.n	80036f4 <_printf_common+0xa4>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	68e5      	ldr	r5, [r4, #12]
 80036ba:	6832      	ldr	r2, [r6, #0]
 80036bc:	f003 0306 	and.w	r3, r3, #6
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	bf08      	it	eq
 80036c4:	1aad      	subeq	r5, r5, r2
 80036c6:	68a3      	ldr	r3, [r4, #8]
 80036c8:	6922      	ldr	r2, [r4, #16]
 80036ca:	bf0c      	ite	eq
 80036cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d0:	2500      	movne	r5, #0
 80036d2:	4293      	cmp	r3, r2
 80036d4:	bfc4      	itt	gt
 80036d6:	1a9b      	subgt	r3, r3, r2
 80036d8:	18ed      	addgt	r5, r5, r3
 80036da:	2600      	movs	r6, #0
 80036dc:	341a      	adds	r4, #26
 80036de:	42b5      	cmp	r5, r6
 80036e0:	d11a      	bne.n	8003718 <_printf_common+0xc8>
 80036e2:	2000      	movs	r0, #0
 80036e4:	e008      	b.n	80036f8 <_printf_common+0xa8>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4652      	mov	r2, sl
 80036ea:	4649      	mov	r1, r9
 80036ec:	4638      	mov	r0, r7
 80036ee:	47c0      	blx	r8
 80036f0:	3001      	adds	r0, #1
 80036f2:	d103      	bne.n	80036fc <_printf_common+0xac>
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fc:	3501      	adds	r5, #1
 80036fe:	e7c6      	b.n	800368e <_printf_common+0x3e>
 8003700:	18e1      	adds	r1, r4, r3
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	2030      	movs	r0, #48	; 0x30
 8003706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800370a:	4422      	add	r2, r4
 800370c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003714:	3302      	adds	r3, #2
 8003716:	e7c7      	b.n	80036a8 <_printf_common+0x58>
 8003718:	2301      	movs	r3, #1
 800371a:	4622      	mov	r2, r4
 800371c:	4649      	mov	r1, r9
 800371e:	4638      	mov	r0, r7
 8003720:	47c0      	blx	r8
 8003722:	3001      	adds	r0, #1
 8003724:	d0e6      	beq.n	80036f4 <_printf_common+0xa4>
 8003726:	3601      	adds	r6, #1
 8003728:	e7d9      	b.n	80036de <_printf_common+0x8e>
	...

0800372c <_printf_i>:
 800372c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	7e0f      	ldrb	r7, [r1, #24]
 8003732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003734:	2f78      	cmp	r7, #120	; 0x78
 8003736:	4691      	mov	r9, r2
 8003738:	4680      	mov	r8, r0
 800373a:	460c      	mov	r4, r1
 800373c:	469a      	mov	sl, r3
 800373e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003742:	d807      	bhi.n	8003754 <_printf_i+0x28>
 8003744:	2f62      	cmp	r7, #98	; 0x62
 8003746:	d80a      	bhi.n	800375e <_printf_i+0x32>
 8003748:	2f00      	cmp	r7, #0
 800374a:	f000 80d8 	beq.w	80038fe <_printf_i+0x1d2>
 800374e:	2f58      	cmp	r7, #88	; 0x58
 8003750:	f000 80a3 	beq.w	800389a <_printf_i+0x16e>
 8003754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800375c:	e03a      	b.n	80037d4 <_printf_i+0xa8>
 800375e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003762:	2b15      	cmp	r3, #21
 8003764:	d8f6      	bhi.n	8003754 <_printf_i+0x28>
 8003766:	a101      	add	r1, pc, #4	; (adr r1, 800376c <_printf_i+0x40>)
 8003768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800376c:	080037c5 	.word	0x080037c5
 8003770:	080037d9 	.word	0x080037d9
 8003774:	08003755 	.word	0x08003755
 8003778:	08003755 	.word	0x08003755
 800377c:	08003755 	.word	0x08003755
 8003780:	08003755 	.word	0x08003755
 8003784:	080037d9 	.word	0x080037d9
 8003788:	08003755 	.word	0x08003755
 800378c:	08003755 	.word	0x08003755
 8003790:	08003755 	.word	0x08003755
 8003794:	08003755 	.word	0x08003755
 8003798:	080038e5 	.word	0x080038e5
 800379c:	08003809 	.word	0x08003809
 80037a0:	080038c7 	.word	0x080038c7
 80037a4:	08003755 	.word	0x08003755
 80037a8:	08003755 	.word	0x08003755
 80037ac:	08003907 	.word	0x08003907
 80037b0:	08003755 	.word	0x08003755
 80037b4:	08003809 	.word	0x08003809
 80037b8:	08003755 	.word	0x08003755
 80037bc:	08003755 	.word	0x08003755
 80037c0:	080038cf 	.word	0x080038cf
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	602a      	str	r2, [r5, #0]
 80037cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0a3      	b.n	8003920 <_printf_i+0x1f4>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	6829      	ldr	r1, [r5, #0]
 80037dc:	0606      	lsls	r6, r0, #24
 80037de:	f101 0304 	add.w	r3, r1, #4
 80037e2:	d50a      	bpl.n	80037fa <_printf_i+0xce>
 80037e4:	680e      	ldr	r6, [r1, #0]
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	2e00      	cmp	r6, #0
 80037ea:	da03      	bge.n	80037f4 <_printf_i+0xc8>
 80037ec:	232d      	movs	r3, #45	; 0x2d
 80037ee:	4276      	negs	r6, r6
 80037f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f4:	485e      	ldr	r0, [pc, #376]	; (8003970 <_printf_i+0x244>)
 80037f6:	230a      	movs	r3, #10
 80037f8:	e019      	b.n	800382e <_printf_i+0x102>
 80037fa:	680e      	ldr	r6, [r1, #0]
 80037fc:	602b      	str	r3, [r5, #0]
 80037fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003802:	bf18      	it	ne
 8003804:	b236      	sxthne	r6, r6
 8003806:	e7ef      	b.n	80037e8 <_printf_i+0xbc>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	1d19      	adds	r1, r3, #4
 800380e:	6029      	str	r1, [r5, #0]
 8003810:	0601      	lsls	r1, r0, #24
 8003812:	d501      	bpl.n	8003818 <_printf_i+0xec>
 8003814:	681e      	ldr	r6, [r3, #0]
 8003816:	e002      	b.n	800381e <_printf_i+0xf2>
 8003818:	0646      	lsls	r6, r0, #25
 800381a:	d5fb      	bpl.n	8003814 <_printf_i+0xe8>
 800381c:	881e      	ldrh	r6, [r3, #0]
 800381e:	4854      	ldr	r0, [pc, #336]	; (8003970 <_printf_i+0x244>)
 8003820:	2f6f      	cmp	r7, #111	; 0x6f
 8003822:	bf0c      	ite	eq
 8003824:	2308      	moveq	r3, #8
 8003826:	230a      	movne	r3, #10
 8003828:	2100      	movs	r1, #0
 800382a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800382e:	6865      	ldr	r5, [r4, #4]
 8003830:	60a5      	str	r5, [r4, #8]
 8003832:	2d00      	cmp	r5, #0
 8003834:	bfa2      	ittt	ge
 8003836:	6821      	ldrge	r1, [r4, #0]
 8003838:	f021 0104 	bicge.w	r1, r1, #4
 800383c:	6021      	strge	r1, [r4, #0]
 800383e:	b90e      	cbnz	r6, 8003844 <_printf_i+0x118>
 8003840:	2d00      	cmp	r5, #0
 8003842:	d04d      	beq.n	80038e0 <_printf_i+0x1b4>
 8003844:	4615      	mov	r5, r2
 8003846:	fbb6 f1f3 	udiv	r1, r6, r3
 800384a:	fb03 6711 	mls	r7, r3, r1, r6
 800384e:	5dc7      	ldrb	r7, [r0, r7]
 8003850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003854:	4637      	mov	r7, r6
 8003856:	42bb      	cmp	r3, r7
 8003858:	460e      	mov	r6, r1
 800385a:	d9f4      	bls.n	8003846 <_printf_i+0x11a>
 800385c:	2b08      	cmp	r3, #8
 800385e:	d10b      	bne.n	8003878 <_printf_i+0x14c>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	07de      	lsls	r6, r3, #31
 8003864:	d508      	bpl.n	8003878 <_printf_i+0x14c>
 8003866:	6923      	ldr	r3, [r4, #16]
 8003868:	6861      	ldr	r1, [r4, #4]
 800386a:	4299      	cmp	r1, r3
 800386c:	bfde      	ittt	le
 800386e:	2330      	movle	r3, #48	; 0x30
 8003870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003878:	1b52      	subs	r2, r2, r5
 800387a:	6122      	str	r2, [r4, #16]
 800387c:	f8cd a000 	str.w	sl, [sp]
 8003880:	464b      	mov	r3, r9
 8003882:	aa03      	add	r2, sp, #12
 8003884:	4621      	mov	r1, r4
 8003886:	4640      	mov	r0, r8
 8003888:	f7ff fee2 	bl	8003650 <_printf_common>
 800388c:	3001      	adds	r0, #1
 800388e:	d14c      	bne.n	800392a <_printf_i+0x1fe>
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	b004      	add	sp, #16
 8003896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389a:	4835      	ldr	r0, [pc, #212]	; (8003970 <_printf_i+0x244>)
 800389c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038a0:	6829      	ldr	r1, [r5, #0]
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80038a8:	6029      	str	r1, [r5, #0]
 80038aa:	061d      	lsls	r5, r3, #24
 80038ac:	d514      	bpl.n	80038d8 <_printf_i+0x1ac>
 80038ae:	07df      	lsls	r7, r3, #31
 80038b0:	bf44      	itt	mi
 80038b2:	f043 0320 	orrmi.w	r3, r3, #32
 80038b6:	6023      	strmi	r3, [r4, #0]
 80038b8:	b91e      	cbnz	r6, 80038c2 <_printf_i+0x196>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	f023 0320 	bic.w	r3, r3, #32
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	2310      	movs	r3, #16
 80038c4:	e7b0      	b.n	8003828 <_printf_i+0xfc>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	f043 0320 	orr.w	r3, r3, #32
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	2378      	movs	r3, #120	; 0x78
 80038d0:	4828      	ldr	r0, [pc, #160]	; (8003974 <_printf_i+0x248>)
 80038d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038d6:	e7e3      	b.n	80038a0 <_printf_i+0x174>
 80038d8:	0659      	lsls	r1, r3, #25
 80038da:	bf48      	it	mi
 80038dc:	b2b6      	uxthmi	r6, r6
 80038de:	e7e6      	b.n	80038ae <_printf_i+0x182>
 80038e0:	4615      	mov	r5, r2
 80038e2:	e7bb      	b.n	800385c <_printf_i+0x130>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	6826      	ldr	r6, [r4, #0]
 80038e8:	6961      	ldr	r1, [r4, #20]
 80038ea:	1d18      	adds	r0, r3, #4
 80038ec:	6028      	str	r0, [r5, #0]
 80038ee:	0635      	lsls	r5, r6, #24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	d501      	bpl.n	80038f8 <_printf_i+0x1cc>
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	e002      	b.n	80038fe <_printf_i+0x1d2>
 80038f8:	0670      	lsls	r0, r6, #25
 80038fa:	d5fb      	bpl.n	80038f4 <_printf_i+0x1c8>
 80038fc:	8019      	strh	r1, [r3, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	4615      	mov	r5, r2
 8003904:	e7ba      	b.n	800387c <_printf_i+0x150>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	602a      	str	r2, [r5, #0]
 800390c:	681d      	ldr	r5, [r3, #0]
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	2100      	movs	r1, #0
 8003912:	4628      	mov	r0, r5
 8003914:	f7fc fc7c 	bl	8000210 <memchr>
 8003918:	b108      	cbz	r0, 800391e <_printf_i+0x1f2>
 800391a:	1b40      	subs	r0, r0, r5
 800391c:	6060      	str	r0, [r4, #4]
 800391e:	6863      	ldr	r3, [r4, #4]
 8003920:	6123      	str	r3, [r4, #16]
 8003922:	2300      	movs	r3, #0
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	e7a8      	b.n	800387c <_printf_i+0x150>
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	462a      	mov	r2, r5
 800392e:	4649      	mov	r1, r9
 8003930:	4640      	mov	r0, r8
 8003932:	47d0      	blx	sl
 8003934:	3001      	adds	r0, #1
 8003936:	d0ab      	beq.n	8003890 <_printf_i+0x164>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	079b      	lsls	r3, r3, #30
 800393c:	d413      	bmi.n	8003966 <_printf_i+0x23a>
 800393e:	68e0      	ldr	r0, [r4, #12]
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	4298      	cmp	r0, r3
 8003944:	bfb8      	it	lt
 8003946:	4618      	movlt	r0, r3
 8003948:	e7a4      	b.n	8003894 <_printf_i+0x168>
 800394a:	2301      	movs	r3, #1
 800394c:	4632      	mov	r2, r6
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	47d0      	blx	sl
 8003954:	3001      	adds	r0, #1
 8003956:	d09b      	beq.n	8003890 <_printf_i+0x164>
 8003958:	3501      	adds	r5, #1
 800395a:	68e3      	ldr	r3, [r4, #12]
 800395c:	9903      	ldr	r1, [sp, #12]
 800395e:	1a5b      	subs	r3, r3, r1
 8003960:	42ab      	cmp	r3, r5
 8003962:	dcf2      	bgt.n	800394a <_printf_i+0x21e>
 8003964:	e7eb      	b.n	800393e <_printf_i+0x212>
 8003966:	2500      	movs	r5, #0
 8003968:	f104 0619 	add.w	r6, r4, #25
 800396c:	e7f5      	b.n	800395a <_printf_i+0x22e>
 800396e:	bf00      	nop
 8003970:	08003c69 	.word	0x08003c69
 8003974:	08003c7a 	.word	0x08003c7a

08003978 <_putc_r>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	460d      	mov	r5, r1
 800397c:	4614      	mov	r4, r2
 800397e:	4606      	mov	r6, r0
 8003980:	b118      	cbz	r0, 800398a <_putc_r+0x12>
 8003982:	6983      	ldr	r3, [r0, #24]
 8003984:	b90b      	cbnz	r3, 800398a <_putc_r+0x12>
 8003986:	f7ff fb23 	bl	8002fd0 <__sinit>
 800398a:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <_putc_r+0x84>)
 800398c:	429c      	cmp	r4, r3
 800398e:	d124      	bne.n	80039da <_putc_r+0x62>
 8003990:	6874      	ldr	r4, [r6, #4]
 8003992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003994:	07d8      	lsls	r0, r3, #31
 8003996:	d405      	bmi.n	80039a4 <_putc_r+0x2c>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	0599      	lsls	r1, r3, #22
 800399c:	d402      	bmi.n	80039a4 <_putc_r+0x2c>
 800399e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039a0:	f7ff fbb4 	bl	800310c <__retarget_lock_acquire_recursive>
 80039a4:	68a3      	ldr	r3, [r4, #8]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	60a3      	str	r3, [r4, #8]
 80039ac:	da05      	bge.n	80039ba <_putc_r+0x42>
 80039ae:	69a2      	ldr	r2, [r4, #24]
 80039b0:	4293      	cmp	r3, r2
 80039b2:	db1c      	blt.n	80039ee <_putc_r+0x76>
 80039b4:	b2eb      	uxtb	r3, r5
 80039b6:	2b0a      	cmp	r3, #10
 80039b8:	d019      	beq.n	80039ee <_putc_r+0x76>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	6022      	str	r2, [r4, #0]
 80039c0:	701d      	strb	r5, [r3, #0]
 80039c2:	b2ed      	uxtb	r5, r5
 80039c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039c6:	07da      	lsls	r2, r3, #31
 80039c8:	d405      	bmi.n	80039d6 <_putc_r+0x5e>
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	059b      	lsls	r3, r3, #22
 80039ce:	d402      	bmi.n	80039d6 <_putc_r+0x5e>
 80039d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039d2:	f7ff fb9c 	bl	800310e <__retarget_lock_release_recursive>
 80039d6:	4628      	mov	r0, r5
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <_putc_r+0x88>)
 80039dc:	429c      	cmp	r4, r3
 80039de:	d101      	bne.n	80039e4 <_putc_r+0x6c>
 80039e0:	68b4      	ldr	r4, [r6, #8]
 80039e2:	e7d6      	b.n	8003992 <_putc_r+0x1a>
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <_putc_r+0x8c>)
 80039e6:	429c      	cmp	r4, r3
 80039e8:	bf08      	it	eq
 80039ea:	68f4      	ldreq	r4, [r6, #12]
 80039ec:	e7d1      	b.n	8003992 <_putc_r+0x1a>
 80039ee:	4629      	mov	r1, r5
 80039f0:	4622      	mov	r2, r4
 80039f2:	4630      	mov	r0, r6
 80039f4:	f7ff f912 	bl	8002c1c <__swbuf_r>
 80039f8:	4605      	mov	r5, r0
 80039fa:	e7e3      	b.n	80039c4 <_putc_r+0x4c>
 80039fc:	08003c18 	.word	0x08003c18
 8003a00:	08003c38 	.word	0x08003c38
 8003a04:	08003bf8 	.word	0x08003bf8

08003a08 <_sbrk_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4d06      	ldr	r5, [pc, #24]	; (8003a24 <_sbrk_r+0x1c>)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	f7fd f8e4 	bl	8000be0 <_sbrk>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_sbrk_r+0x1a>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_sbrk_r+0x1a>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	20000154 	.word	0x20000154

08003a28 <__sread>:
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a30:	f000 f8a0 	bl	8003b74 <_read_r>
 8003a34:	2800      	cmp	r0, #0
 8003a36:	bfab      	itete	ge
 8003a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a3c:	181b      	addge	r3, r3, r0
 8003a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a42:	bfac      	ite	ge
 8003a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a46:	81a3      	strhlt	r3, [r4, #12]
 8003a48:	bd10      	pop	{r4, pc}

08003a4a <__swrite>:
 8003a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4e:	461f      	mov	r7, r3
 8003a50:	898b      	ldrh	r3, [r1, #12]
 8003a52:	05db      	lsls	r3, r3, #23
 8003a54:	4605      	mov	r5, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	4616      	mov	r6, r2
 8003a5a:	d505      	bpl.n	8003a68 <__swrite+0x1e>
 8003a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a60:	2302      	movs	r3, #2
 8003a62:	2200      	movs	r2, #0
 8003a64:	f000 f868 	bl	8003b38 <_lseek_r>
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a72:	81a3      	strh	r3, [r4, #12]
 8003a74:	4632      	mov	r2, r6
 8003a76:	463b      	mov	r3, r7
 8003a78:	4628      	mov	r0, r5
 8003a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7e:	f000 b817 	b.w	8003ab0 <_write_r>

08003a82 <__sseek>:
 8003a82:	b510      	push	{r4, lr}
 8003a84:	460c      	mov	r4, r1
 8003a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a8a:	f000 f855 	bl	8003b38 <_lseek_r>
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	bf15      	itete	ne
 8003a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a9e:	81a3      	strheq	r3, [r4, #12]
 8003aa0:	bf18      	it	ne
 8003aa2:	81a3      	strhne	r3, [r4, #12]
 8003aa4:	bd10      	pop	{r4, pc}

08003aa6 <__sclose>:
 8003aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aaa:	f000 b813 	b.w	8003ad4 <_close_r>
	...

08003ab0 <_write_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4d07      	ldr	r5, [pc, #28]	; (8003ad0 <_write_r+0x20>)
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	4608      	mov	r0, r1
 8003ab8:	4611      	mov	r1, r2
 8003aba:	2200      	movs	r2, #0
 8003abc:	602a      	str	r2, [r5, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7fc fd9f 	bl	8000602 <_write>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_write_r+0x1e>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_write_r+0x1e>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	20000154 	.word	0x20000154

08003ad4 <_close_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4d06      	ldr	r5, [pc, #24]	; (8003af0 <_close_r+0x1c>)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	4604      	mov	r4, r0
 8003adc:	4608      	mov	r0, r1
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	f7fd f849 	bl	8000b76 <_close>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d102      	bne.n	8003aee <_close_r+0x1a>
 8003ae8:	682b      	ldr	r3, [r5, #0]
 8003aea:	b103      	cbz	r3, 8003aee <_close_r+0x1a>
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
 8003af0:	20000154 	.word	0x20000154

08003af4 <_fstat_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4d07      	ldr	r5, [pc, #28]	; (8003b14 <_fstat_r+0x20>)
 8003af8:	2300      	movs	r3, #0
 8003afa:	4604      	mov	r4, r0
 8003afc:	4608      	mov	r0, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	602b      	str	r3, [r5, #0]
 8003b02:	f7fd f844 	bl	8000b8e <_fstat>
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	d102      	bne.n	8003b10 <_fstat_r+0x1c>
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	b103      	cbz	r3, 8003b10 <_fstat_r+0x1c>
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	bd38      	pop	{r3, r4, r5, pc}
 8003b12:	bf00      	nop
 8003b14:	20000154 	.word	0x20000154

08003b18 <_isatty_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4d06      	ldr	r5, [pc, #24]	; (8003b34 <_isatty_r+0x1c>)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	f7fd f843 	bl	8000bae <_isatty>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_isatty_r+0x1a>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_isatty_r+0x1a>
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	20000154 	.word	0x20000154

08003b38 <_lseek_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4d07      	ldr	r5, [pc, #28]	; (8003b58 <_lseek_r+0x20>)
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	4608      	mov	r0, r1
 8003b40:	4611      	mov	r1, r2
 8003b42:	2200      	movs	r2, #0
 8003b44:	602a      	str	r2, [r5, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f7fd f83c 	bl	8000bc4 <_lseek>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d102      	bne.n	8003b56 <_lseek_r+0x1e>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b103      	cbz	r3, 8003b56 <_lseek_r+0x1e>
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
 8003b58:	20000154 	.word	0x20000154

08003b5c <__malloc_lock>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	; (8003b64 <__malloc_lock+0x8>)
 8003b5e:	f7ff bad5 	b.w	800310c <__retarget_lock_acquire_recursive>
 8003b62:	bf00      	nop
 8003b64:	20000148 	.word	0x20000148

08003b68 <__malloc_unlock>:
 8003b68:	4801      	ldr	r0, [pc, #4]	; (8003b70 <__malloc_unlock+0x8>)
 8003b6a:	f7ff bad0 	b.w	800310e <__retarget_lock_release_recursive>
 8003b6e:	bf00      	nop
 8003b70:	20000148 	.word	0x20000148

08003b74 <_read_r>:
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4d07      	ldr	r5, [pc, #28]	; (8003b94 <_read_r+0x20>)
 8003b78:	4604      	mov	r4, r0
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	2200      	movs	r2, #0
 8003b80:	602a      	str	r2, [r5, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f7fc ffda 	bl	8000b3c <_read>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_read_r+0x1e>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_read_r+0x1e>
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	20000154 	.word	0x20000154

08003b98 <_init>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr

08003ba4 <_fini>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr
